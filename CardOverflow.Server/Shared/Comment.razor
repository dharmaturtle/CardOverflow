@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Server.Data
@inject TimeProvider Time
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserProvider UserProvider
@inject ExampleAppender ExampleAppender

@if (_userId.HasValue) {
  <li class="list-group-item border-0">
    @if (!isSaved) {
      <EditForm Model=@WriteComment OnValidSubmit=@SaveComment>
        <div class="form-group">
          <InputTextArea @bind-Value=@WriteComment.Text class="form-control" rows="3" placeholder="Use comments to suggest improvements or elicit discussion. Avoid comments like &quot;+1&quot; or &quot;Thanks&quot;." /> @*this seems to break validation: @bind-Value:event="oninput"*@
          <button type="submit" class="btn btn-primary float-right">
            Add Comment
          </button>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
      </EditForm>
    }
  </li>
}

@code {
  private Guid? _userId;
  [Parameter] public Guid ConceptId { get; set; }
  [Parameter] public EventCallback<string> AddComment { get; set; }
  CommentText WriteComment = new CommentText();
  bool isSaved;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _userId = await UserProvider.GetId();
    StateHasChanged();
  }

  async Task SaveComment() {
    if (await ExampleAppender.AddComment(WriteComment.Text, ConceptId)) {
      isSaved = true;
      await AddComment.InvokeAsync(WriteComment.Text);
    }
  }

}
