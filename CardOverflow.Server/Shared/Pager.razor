@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity

@* Inspired by https://gunnarpeipman.com/blazor/blazor-shared-pager/*@
@if (Details != null) {
  <div class="row">
    <div class="col-md-8 col-sm-8">
      @if (Details.PageCount > 1) {
        <ul class="pagination pull-right">
          <li><button type="button" @onclick=@(() => PagerButtonClicked(1)) class="btn">&laquo;</button></li>
          @for (var i = StartIndex; i <= FinishIndex; i++) {
            var currentIndex = i;
            @if (i == Details.CurrentPage) {
              <li><span class="btn btn-primary">@i</span></li>
            } else {
              <li><button type="button" @onclick=@(() => PagerButtonClicked(currentIndex)) class="btn">@i</button></li>
            }
          }
          <li><button type="button" @onclick=@(() => PagerButtonClicked(Details.PageCount)) class="btn">&raquo;</button></li>
        </ul>
      }
    </div>
  </div>
}

@code {
  [Parameter]
  public PagedListDetails Details { get; set; }
  [Parameter]
  public EventCallback<int> PageChanged { get; set; }

  int StartIndex;
  int FinishIndex;

  protected override void OnParametersSet() {
    base.OnParametersSet();
    if (Details != null) {
      StartIndex = Math.Max(Details.CurrentPage - 5, 1);
      FinishIndex = Math.Min(Details.CurrentPage + 5, Details.PageCount);
    }
  }

  protected async Task PagerButtonClicked(int page) =>
    await PageChanged.InvokeAsync(page);

}
