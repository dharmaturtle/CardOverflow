@using ThoughtDesign.WebLibrary
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Server.Data
@inject IJSRuntime Js
@inject UrlProvider UrlProvider

@if (Srcdoc == default) {
  <iframe sandbox="allow-scripts allow-same-origin" src=@_src scrolling="no" @ref="iframe" @onload=@iframeloaded
          style="width: 1px; min-width: 100%; height:100px;" />
} else {
  <iframe sandbox="allow-scripts allow-same-origin" srcdoc=@Srcdoc scrolling="no" @ref="iframe" @onload=@iframeloaded
          style="width: 1px; min-width: 100%; height:100px;" />
}

@code {
  [Parameter] public Guid ConceptId { get; set; }
  [Parameter] public (Guid RevisionId, short Index) Revision { get; set; }
  [Parameter] public Guid TemplateId { get; set; }
  [Parameter] public Guid TemplateRevisionId { get; set; }
  [Parameter] public bool Front { get; set; }
  [Parameter] public bool Back { get; set; }
  [Parameter] public string Srcdoc { get; set; }
  private ElementReference iframe;
  private string _src;

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    var middle = "";
    if (ConceptId != Guid.Empty) {
      middle = "concept/" + ConceptId;
    } else if (!Revision.Equals(default)) {
      middle = "revision/" + Revision.RevisionId + "/" + Revision.Index;
    } else if (TemplateId != Guid.Empty) {
      middle = "template/" + TemplateId;
    } else if (TemplateRevisionId != Guid.Empty) {
      middle = "templaterevision/" + TemplateRevisionId;
    } else {
      throw new Exception("You done goofed.");
    }
    var tail = Back ? "/back" : Front ? "/front" : "";
    _src = UrlProvider.UserContentApi + middle + tail;
  }

  async Task iframeloaded() => await Js.InvokeAsync<string>("resizeIframe", iframe);
}

@* medTODO https://mathiasbynens.github.io/rel-noopener/ *@
