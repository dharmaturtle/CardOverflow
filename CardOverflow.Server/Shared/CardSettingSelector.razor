@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using Domain
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserProvider UserProvider

<AuthorizeView>
  <select class="form-control" @onchange=@(x => x.Value.ToString().Apply(Guid.Parse).Apply(_SetSelected))>
    @foreach (var setting in _settings) {
      <option value=@setting.Id selected=@(SelectedId == setting.Id)>@setting.Name</option>
    }
  </select>
</AuthorizeView>

@code {
  [Parameter] public Guid SelectedId { get; set; }
  [Parameter] public EventCallback<Guid> SettingSelected { get; set; }
  private List<CardSetting> _settings = new List<CardSetting>();

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    var user = await UserProvider.ForceSummary();
    _settings = user.CardSettings.ToList();
    if (SelectedId == default) {
      SelectedId = _settings.Single(x => x.IsDefault).Id;
    }
    StateHasChanged();
  }

  private async Task _SetSelected(Guid newId) {
    SelectedId = newId;
    await SettingSelected.InvokeAsync(newId);
  }

}
