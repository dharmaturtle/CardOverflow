@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService

@if (Decks == null) {
  <p><em>Loading...</em></p>
} else {
  <AuthorizeView>
    <select multiple class="form-control" @onchange=@(x => x.Value.ToString().Apply(_SetSelected))>
      @foreach (var deck in Decks) {
        <option value=@deck.Id selected=@(SelectedIds.Contains(deck.Id))>@deck.Name</option>
      }
    </select>
  </AuthorizeView>
}

@code {
  [Parameter] public List<Guid> SelectedIds { get; set; }
  [Parameter] public EventCallback<List<Guid>> DecksSelected { get; set; }
  [Parameter] public List<SimpleDeck> Decks { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    Decks ??= await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getSimple(db, Guid.Empty));
    StateHasChanged();
  }

  private async Task _SetSelected(string guids) {
    SelectedIds = guids.Split(",").Select(Guid.Parse).ToList(); // this is a wildass guess
    await DecksSelected.InvokeAsync(SelectedIds);
  }

}
