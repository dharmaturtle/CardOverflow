@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService

@if (Decks == null) {
  <p><em>Loading...</em></p>
} else {
  <AuthorizeView>
    <select class="form-control" @onchange=@(x => x.Value.ToString().Apply(Guid.Parse).Apply(_SetSelected))>
      @foreach (var deck in Decks) {
        <option value=@deck.Id selected=@(SelectedId == deck.Id)>@deck.Name</option>
      }
    </select>
  </AuthorizeView>
}

@code {
  [CascadingParameter] Task<Domain.Summary.User> UserTask { get; set; }
  [Parameter] public Guid SelectedId { get; set; }
  [Parameter] public EventCallback<Guid> DeckSelected { get; set; }
  [Parameter] public List<SimpleDeck> Decks { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    var user = await UserTask;
    Decks ??= await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getSimple(db, user.Id));
    if (SelectedId == default) {
      SelectedId = Decks.Single(x => x.IsDefault).Id;
    }
    StateHasChanged();
  }

  private async Task _SetSelected(Guid newId) {
    SelectedId = newId;
    await DeckSelected.InvokeAsync(newId);
  }

}
