@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Microsoft.FSharp.Collections
@inject DbExecutor DbExecutor
@* https://bitsofco.de/github-contribution-graph-css-grid/ *@

<style>
  /* Article - https://bitsofco.de/github-contribution-graph-css-grid/ */

  /* Grid-related CSS */

  :root {
    --square-size: 15px;
    --square-gap: 5px;
    --week-width: calc(var(--square-size) + var(--square-gap));
  }

  .months {
    grid-area: months;
  }

  .days {
    grid-area: days;
  }

  .squares {
    grid-area: squares;
  }

  .graph {
    display: inline-grid;
    grid-template-areas: "empty months" "days squares";
    grid-template-columns: auto 1fr;
    grid-gap: 10px;
  }

  .months {
    display: grid;
    grid-template-columns: calc(var(--week-width) * 4) /* Jan */
    calc(var(--week-width) * 4) /* Feb */
    calc(var(--week-width) * 4) /* Mar */
    calc(var(--week-width) * 5) /* Apr */
    calc(var(--week-width) * 4) /* May */
    calc(var(--week-width) * 4) /* Jun */
    calc(var(--week-width) * 5) /* Jul */
    calc(var(--week-width) * 4) /* Aug */
    calc(var(--week-width) * 4) /* Sep */
    calc(var(--week-width) * 5) /* Oct */
    calc(var(--week-width) * 4) /* Nov */
    calc(var(--week-width) * 5) /* Dec */;
  }

  .days,
  .squares {
    display: grid;
    grid-gap: var(--square-gap);
    grid-template-rows: repeat(7, var(--square-size));
  }

  .squares {
    grid-auto-flow: column;
    grid-auto-columns: var(--square-size);
  }


  /* Other styling */

  body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-size: 12px;
  }

  .graph {
    padding: 20px;
    border: 1px #e1e4e8 solid;
  }

    .graph li {
      list-style-type: none;
    }

  .days li:nth-child(odd) {
    visibility: hidden;
  }

  .squares li[data-level="0"] { /* https://stackoverflow.com/a/14482323 https://meyerweb.com/eric/tools/color-blend/#FFFFFF:004700:9:hex */
    background-color: #FFFFFF;
    border: inset;
    border-width: 1px;
  }

  .squares li[data-level="1"] {
    background-color: #E6EDE6;
  }

  .squares li[data-level="2"] {
    background-color: #CCDACC;
  }

  .squares li[data-level="3"] {
    background-color: #B3C8B3;
  }

  .squares li[data-level="4"] {
    background-color: #99B599;
  }

  .squares li[data-level="5"] {
    background-color: #80A380;
  }

  .squares li[data-level="6"] {
    background-color: #669166;
  }

  .squares li[data-level="7"] {
    background-color: #4D7E4D;
  }

  .squares li[data-level="8"] {
    background-color: #336C33;
  }

  .squares li[data-level="9"] {
    background-color: #1A591A;
  }

  .squares li[data-level="10"] {
    background-color: #004700;
  }

  /* https://www.w3schools.com/css/css_tooltip.asp */

  .calendar-tooltip {
    position: relative;
    display: inline-block;
  }

    .calendar-tooltip .calendar-tooltiptext {
      visibility: hidden;
      width: 120px;
      background-color: black;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 5px 0;
      position: absolute;
      z-index: 1;
      bottom: 150%;
      left: 50%;
      margin-left: -60px;
    }

      .calendar-tooltip .calendar-tooltiptext::after {
        content: "";
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: black transparent transparent transparent;
      }

    .calendar-tooltip:hover .calendar-tooltiptext {
      visibility: visible;
    }
</style>

<div class="graph">
  @*<ul class="months">
      <li>Jan</li>
      <li>Feb</li>
      <li>Mar</li>
      <li>Apr</li>
      <li>May</li>
      <li>Jun</li>
      <li>Jul</li>
      <li>Aug</li>
      <li>Sep</li>
      <li>Oct</li>
      <li>Nov</li>
      <li>Dec</li>
    </ul>
    <ul class="days">
      <li>Sun</li>
      <li>Mon</li>
      <li>Tue</li>
      <li>Wed</li>
      <li>Thu</li>
      <li>Fri</li>
      <li>Sat</li>
    </ul>*@
  <ul class="squares">
    @foreach (var dateCountLevel in _heatmap.DateCountLevels) {
      <li data-level="@dateCountLevel.Level" class="calendar-tooltip">
        <div class="calendar-tooltiptext">
          <p class="mb-0">@dateCountLevel.Count reviews</p>
          <p class="mb-0">@dateCountLevel.Date.ToString("ddd, d MMM", CultureInfo.InvariantCulture)</p>
        </div>
      </li>
    }
  </ul>
</div>
<ul class="list-group list-group-horizontal row d-flex justify-content-center">
  <li class="list-group-item border-0">Daily average: @_heatmap.DailyAverageReviews reviews</li>
  <li class="list-group-item border-0">Days learned: @_heatmap.DaysLearnedPercent%</li>
  <li class="list-group-item border-0">Longest streak: @_heatmap.LongestStreakDays days</li>
  <li class="list-group-item border-0">Current streak: @_heatmap.CurrentStreakDays days</li>
</ul>

@code {
  [CascadingParameter] Task<Domain.Summary.User> UserTask { get; set; }

  private CardOverflow.Pure.Heatmap _heatmap = new CardOverflow.Pure.Heatmap(ListModule.Empty<DateCountLevel>(), 0, 0, 0, 0);

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    var user = await UserTask;
    _heatmap = await DbExecutor.QueryAsync(x => HistoryRepository.getHeatmap(x, user.Id));
    StateHasChanged();
  }

}
