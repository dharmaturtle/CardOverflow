@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@inject DbExecutor DbExecutor
@* lowTODO this doesn't appear if there's only 1 search result *@
@if (!string.IsNullOrWhiteSpace(BeforeId) || !string.IsNullOrWhiteSpace(AfterId)) {
  <span style="min-width: fit-content;">
    <a href=@BackLink>
      <span class="oi oi-arrow-circle-left" />
    </a>
    &nbsp;
  </span>
}
<EditForm OnValidSubmit=@(() => SearchClicked.InvokeAsync(search)) Model=@search class="form-inline input-group">
  <InputText class="form-control" placeholder="Search" aria-label="Search" @bind-Value=@search.Query />
  <button class="btn btn-primary" type="submit">
    <span class="oi oi-magnifying-glass" />
  </button>
  <span class="m-2">Sort by:</span>
  <select class="form-control col-2" @onchange=@(x => x.Value.ToString().Apply(int.Parse).Do(id => search.Order = (SearchOrder)id))>
    @foreach (var template in Enum.GetNames(typeof(SearchOrder))) {
      <option value=@((int) Enum.Parse(typeof(SearchOrder), template))>@template</option>
    }
  </select>
  <DataAnnotationsValidator />
  <ValidationSummary />
</EditForm>
<span style="min-width: fit-content;">
  &nbsp;
  <a href=@CreateLink(BeforeId) style=@(string.IsNullOrWhiteSpace(BeforeId) ? "visibility: hidden" : "")>
    <span class="oi oi-chevron-left" />
  </a>
  &nbsp;
  <a href=@CreateLink(AfterId) style=@(string.IsNullOrWhiteSpace(AfterId) ? "visibility: hidden" : "")>
    <span class="oi oi-chevron-right" />
  </a>
</span>

@code {
  [Parameter] public EventCallback<SearchCommand> SearchClicked { get; set; }
  [Parameter] public string BackLink { get; set; }
  [Parameter] public Func<string, string> CreateLink { get; set; }
  [Parameter] public List<string> Ids { get; set; }
  [Parameter] public string SelectedId { get; set; }
  [Parameter] public string Query { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (Query != null) {
      search.Query = Query;
    }
  }

  string BeforeId => Ids?.AsEnumerable()?.Reverse() // https://stackoverflow.com/a/10600012
    ?.SkipWhile(x => x != SelectedId)?.Skip(1)?.FirstOrDefault();
  string AfterId => Ids
    ?.SkipWhile(x => x != SelectedId)?.Skip(1)?.FirstOrDefault();
  
  SearchCommand search = new SearchCommand("", SearchOrder.Popularity);
}
