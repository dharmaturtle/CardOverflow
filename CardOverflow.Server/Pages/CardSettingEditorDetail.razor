@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService

<EditForm Model=@Setting OnValidSubmit=@Save>
  <div class="form-group">
    
    <InputText @bind-Value=@Setting.Name class="form-control" /> @*this seems to break validation: @bind-Value:event="oninput"*@

    @*@if (Setting.IsDefault) {
      <button type="button" class="btn btn-primary disabled" disabled>
        This is the default card setting
      </button>
    } else {
      <button type="button" class="btn btn-outline-primary" @onclick=@SetAsDefault>
        Set as default
      </button>
    }*@
    <div class="form-check">
      <label class="form-check-label">
        <InputCheckbox @bind-Value=@Setting.ShowAnswerTimer class="form-check-input" />
        Show answer timer
      </label>
    </div>
    <div class="form-check">
      <label class="form-check-label">
        <InputCheckbox @bind-Value=@Setting.AutomaticallyPlayAudio class="form-check-input" />
        Automatically play audio
      </label>
    </div>
    <div class="form-check">
      <label class="form-check-label">
        <InputCheckbox @bind-Value=@Setting.ReplayQuestionAudioOnAnswer class="form-check-input" />
        Replay question audio on answer
      </label>
    </div>

    <div class="card-deck">
      
      <div class="card">
        <div class="card-header">
          <h3>New Cards</h3>
        </div>
        <div class="card-body">
          <table class="table-borderless">
            <tbody>
              <tr>
                <th scope="row">Steps <span class="small">(in minutes)</span></th>
                <td><InputText @bind-Value=@Setting.NewCardsSteps class="form-control" /></td>
              </tr>
              <tr>
                <th scope="row">Max Per Day</th>
                <td><InputNumber @bind-Value=@Setting.NewCardsMaxPerDay class="form-control" /></td>
                <td>cards</td>
              </tr>
              <tr>
                <th scope="row">Graduating Interval</th>
                <td><InputNumber @bind-Value=@Setting.NewCardsGraduatingInterval class="form-control" /></td>
                <td>days</td>
              </tr>
              <tr>
                <th scope="row">Easy Interval</th>
                <td><InputNumber @bind-Value=@Setting.NewCardsEasyInterval class="form-control" /></td>
                <td>days</td>
              </tr>
              <tr>
                <th scope="row">Starting Ease Factor</th>
                <td><InputNumber @bind-Value=@Setting.NewCardsStartingEaseFactor class="form-control" /></td>
                <td>%</td>
              </tr>
              <tr>
                <th scope="row">Bury Related</th>
                <td><InputCheckbox @bind-Value=@Setting.NewCardsBuryRelated class="form-control" /></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <div class="card">
        <div class="card-header">
          <h3>Mature Cards</h3>
        </div>
        <div class="card-body">
          <table class="table-borderless">
            <tbody>
              <tr>
                <th scope="row">Max Per Day</th>
                <td><InputNumber @bind-Value=@Setting.MatureCardsMaxPerDay class="form-control" /></td>
                <td>cards</td>
              </tr>
              <tr>
                <th scope="row">Ease Factor Easy Bonus Factor</th>
                <td><InputNumber @bind-Value=@Setting.MatureCardsEaseFactorEasyBonusFactor class="form-control" /></td>
                <td>%</td>
              </tr>
              <tr>
                <th scope="row">Interval factor</th>
                <td><InputNumber @bind-Value=@Setting.MatureCardsIntervalFactor class="form-control" /></td>
                <td>%</td>
              </tr>
              <tr>
                <th scope="row">Maximum Interval</th>
                <td><InputNumber @bind-Value=@Setting.MatureCardsMaximumInterval class="form-control" /></td>
                <td>days</td>
              </tr>
              <tr>
                <th scope="row">Hard factor</th>
                <td><InputNumber @bind-Value=@Setting.MatureCardsHardInterval class="form-control" /></td>
                <td>%</td>
              </tr>
              <tr>
                <th scope="row">Bury Related</th>
                <td><InputCheckbox @bind-Value=@Setting.MatureCardsBuryRelated class="form-control" /></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <div class="card">
        <div class="card-header">
          <h3>Lapsed Cards</h3>
        </div>
        <div class="card-body">
          <table class="table-borderless">
            <tbody>
              <tr>
                <th scope="row">Steps <span class="small">(in minutes)</span></th>
                <td><InputText @bind-Value=@Setting.LapsedCardsSteps class="form-control" /></td>
              </tr>
              <tr>
                <th scope="row">New interval factor</th>
                <td><InputNumber @bind-Value=@Setting.LapsedCardsNewIntervalFactor class="form-control" /></td>
                <td>%</td>
              </tr>
              <tr>
                <th scope="row">Minimum interval</th>
                <td><InputNumber @bind-Value=@Setting.LapsedCardsMinimumInterval class="form-control" /></td>
                <td>days</td>
              </tr>
              <tr>
                <th scope="row">Leech threshold</th>
                <td><InputNumber @bind-Value=@Setting.LapsedCardsLeechThreshold class="form-control" /></td>
                <td>lapses</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

    </div>

    <DataAnnotationsValidator />
    <ValidationSummary />
  </div>
</EditForm>

@code {
  [Parameter] public ViewCardSetting Setting { get; set; }
  [Parameter] public EventCallback Save { get; set; }
  [Parameter] public EventCallback SetAsDefault { get; set; }

}
