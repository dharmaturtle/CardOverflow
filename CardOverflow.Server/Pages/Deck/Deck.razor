@page "/deck"
@attribute [Authorize]
@using static FSharpx.FSharpOption;
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Shared
@using static Domain.Projection
@using static Domain.Infrastructure
@inject DbExecutor DbExecutor
@inject Scheduler Scheduler
@inject TimeProvider TimeProvider
@inject DeckAppender DeckAppender
@inject IJSRuntime Js
@inject IToastService ToastService
@inject CardOverflow.Server.Dexie Dexie
@inject UserProvider UserProvider
@inject DeckAppender DeckAppender

<div class="container">
  <table class="table">
    <tr>
      <th></th>
      <th></th>
      <th>
        <button type="button" class="btn btn-outline-success" @onclick=@(() =>_ShowModal(new IdName(default, "New Deck")))>
          <i class="fas fa-plus"></i>
        </button>
      </th>
    </tr>
    @foreach (var deck in _decks) {
      <tr>
        <td>
          <a href="deck/@deck.Id">
            @deck.Name
          </a>
          <button type="button" class="btn bg-transparent" @onclick=@(() => _ShowModal(new IdName(deck.Id, deck.Name)))>
            <span class="oi oi-pencil"></span>
          </button>
        </td>
        <DeckRow Deck=deck
                 SetIsDefault=@(() => {
                                  foreach (var d in _decks) {
                                    d.IsDefault = d.Id == deck.Id;
                                  }
                                })
                 Delete=@(modal => _DeleteDeck(deck.Id, modal)) />
      </tr>
    }
  </table>
</div>

<BSModal @ref=_CreateOrRenameModal>
  <EditForm Model=_activeDeck OnValidSubmit=@_Submit>
    <BSModalHeader OnClick=_CreateOrRenameModal.Hide>
      @if (_activeDeck.Id == default) {
        <span>Create Deck</span>
      } else {
        <span>Rename Deck</span>
      }
    </BSModalHeader>
    <BSModalBody>
      <div class="form-group">
        <label for="newDeckNameInput">Name</label>
        <InputText @bind-Value=_activeDeck.Name class="form-control" id="newDeckNameInput" /> @*this seems to break validation: @bind-Value:event="oninput"*@
        <ValidationMessage For=@(() => _activeDeck.Name) />
      </div>
      <DataAnnotationsValidator />
    </BSModalBody>
    <BSModalFooter>
      <BSButton Color="Color.Secondary" OnClick=@_CreateOrRenameModal.Hide type="button">
        Cancel
      </BSButton>
      <BSButton Color="Color.Primary" type="submit">
        Save
      </BSButton>
    </BSModalFooter>
  </EditForm>
</BSModal>

@code {
  private Domain.Summary.User _user;
  private List<ViewDeck> _decks = new();
  private BSModal _CreateOrRenameModal;
  private IdName _activeDeck = new IdName(default, "New Deck");

  private void _ShowModal(IdName idName) {
    _activeDeck = idName;
    _CreateOrRenameModal.Show();
  }

  protected override async Task OnInitializedAsync() {
    _user = await UserProvider.ForceSummary();
  }

  protected override async Task OnParametersSetAsync() =>
    _decks = await Dexie.GetViewDecks(_user.DefaultDeckId);

  private async Task _DeleteDeck(Guid deckId, BSModal modal) {
    if (await DeckAppender.Discard(deckId)) {
      _decks = _decks.Where(x => x.Id != deckId).ToList();
      modal.Hide();
    }
  }

  private async Task _Create() {
    if (await DeckAppender.Create(_activeDeck.Name)) {
      _decks = await Dexie.GetViewDecks(_user.DefaultDeckId);
      _CreateOrRenameModal.Hide();
    }
  }

  private async Task _Submit() =>
    await (_activeDeck.Id == default
      ? _Create()
      : _Rename());

  private async Task _Rename() {
    if (await DeckAppender.Edit(_activeDeck.Id, _activeDeck.Name, "")) {
      _decks.Single(x => x.Id == _activeDeck.Id).Name = _activeDeck.Name;
      _CreateOrRenameModal.Hide();
    }
  }

}
