@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Shared
@inject DbExecutor DbExecutor
@inject Scheduler Scheduler
@inject TimeProvider TimeProvider
@inject IJSRuntime Js
@inject IToastService ToastService
<td>
  @if (Deck.IsDefault) {
    <button type="button" class="btn bg-transparent" @onclick=@(() => ToastService.ShowInfo("This is the default deck."))>
      <i class="text-warning fas fa-star" title="The default deck"></i>
    </button>
  } else {
    <button type="button" class="btn bg-transparent" @onclick=@(() =>_SetDefault(Deck.Id))>
      <i class="text-muted far fa-star"></i>
    </button>
  }
</td>
<td>
  @if (Deck.IsPublic) {
    <button type="button" class="btn bg-transparent" @onclick=@(() => _setPublic(false))>
      <i class="text-success fas fa-eye" title="Is displayed on your user profile."></i>
    </button>
  } else {
    <button type="button" class="btn bg-transparent" @onclick=@(() => _setPublic(true))>
      <i class="text-muted fas fa-eye-slash" title="Is not displayed on your user profile."></i>
    </button>
  }
</td>
<td>
  <button type="button" class="btn bg-transparent" @onclick=@_DeleteClicked>
    <span class="oi oi-trash"></span>
  </button>
</td>

<BSModal @ref=_DeleteModal>
  <BSModalHeader OnClick=_DeleteModal.Hide>
    Delete Deck
  </BSModalHeader>
  <BSModalBody>
    @if (Deck.AllCount >= 1) {
      <span>Deleting a deck will move all its cards to the default deck. Are you sure you want to delete "@Deck.Name" which has @Deck.AllCount cards?</span>
    } else {
      <span>Are you sure you want to delete "@Deck.Name"?</span>
    }
  </BSModalBody>
  <BSModalFooter>
    <BSButton Color="Color.Secondary" OnClick=_DeleteModal.Hide>
      Cancel
    </BSButton>
    <BSButton Color="Color.Danger" OnClick=_DeleteSave>
      <span class="oi oi-trash"></span> Delete @Deck.Name
    </BSButton>
  </BSModalFooter>
</BSModal>

<BSModal @ref=_DeleteDefaultModal>
  <BSModalHeader OnClick=_DeleteDefaultModal.Hide>
    Delete Default Deck
  </BSModalHeader>
  <BSModalBody>
    You can't delete your default deck. Make another deck default before deleting this deck.
  </BSModalBody>
  <BSModalFooter>
    <BSButton Color="Color.Primary" OnClick=_DeleteDefaultModal.Hide>
      Close
    </BSButton>
  </BSModalFooter>
</BSModal>

@code {
  [CascadingParameter] Task<Domain.Summary.User> UserTask { get; set; }
  [Parameter] public ViewDeck Deck { get; set; }
  [Parameter] public EventCallback<BSModal> Delete { get; set; }
  [Parameter] public EventCallback SetIsDefault { get; set; }
  [Parameter] public EventCallback<bool> SetPublic { get; set; }
  private BSModal _DeleteDefaultModal;
  private BSModal _DeleteModal;

  private void _DeleteClicked() {
    if (Deck.IsDefault) {
      _DeleteDefaultModal.Show();
    } else {
      _DeleteModal.Show();
    }
  }

  private async Task _DeleteSave() =>
    await Delete.InvokeAsync(_DeleteModal);

  private async Task _SetDefault(Guid deckId) {
    var user = await UserTask;
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.setDefault(db, user.Id, deckId)).Match(ToastService, async _ => await SetIsDefault.InvokeAsync(null));
  }

  private async Task _setPublic(bool isPublic) {
    var user = await UserTask;
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.setIsPublic(db, user.Id, Deck.Id, isPublic)).Match(ToastService, async _ =>
      await SetPublic.InvokeAsync(isPublic)
    );
  }

}
