@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Server.Pages.Concept
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject Dexie Dexie
@inject UserProvider UserProvider
@inject IToastService ToastService

<div class="btn-group btn-group-sm">
  @*@if (Deck.IsFollowed) {
    <button type="button" class="btn btn-outline-secondary" @onclick=@_unfollow>
      <i class="text-warning fas fa-bell"></i> Unfollow
    </button>
  } else {
    <button type="button" class="btn btn-outline-secondary" @onclick=@_followClicked>
      <i class="far fa-bell"></i> Follow
    </button>
  }*@
  <a class="btn btn-outline-secondary" href="deck/@Deck.Id/followers">
    @Deck.SourceOf
  </a>
</div>

<BSModal @ref=_modal>
  <EditForm Model=_followCommandViewModel OnValidSubmit=_follow>
    <BSModalHeader OnClick=_modal.Hide>
      Follow <a href="user/@Deck.AuthorId">@Deck.Author</a>'s <a href="deck/@Deck.Id">@Deck.Name</a> Deck
    </BSModalHeader>
    <BSModalBody>
      <div class="form-check mb-3">
        <label class="form-check-label">
          <InputCheckbox @bind-Value=@_followCommandViewModel.NotifyOfAnyNewChanges class="form-check-input" />
          Notify me of any new changes.
        </label>
      </div>
      <div class="btn-group mb-3" role="group">
        <button type="button" @onclick=@(() =>  _SetFollowType(FollowType.NewDeck)) class="btn btn-@(_IsSelected(FollowType.NewDeck))primary">Add Cards To New Deck</button>
        <button type="button" @onclick=@(() =>  _SetFollowType(FollowType.OldDeck)) class="btn btn-@(_IsSelected(FollowType.OldDeck))primary">Add Cards To Existing Deck</button>
        <button type="button" @onclick=@(() =>  _SetFollowType(FollowType.NoDeck)) class="btn btn-@(_IsSelected(FollowType.NoDeck))primary">Don't Add Cards</button>
      </div>
      @switch (_followCommandViewModel.FollowType) {
        case FollowType.NewDeck:
          <div class="input-group">
            <label for="@($"nameInput-{Deck.Id}")" class="col-form-label mr-2">
              New Deck Name:
            </label>
            <InputText id="@($"nameInput-{Deck.Id}")" @bind-Value=@_followCommandViewModel.NewDeckName class="form-control" />
            <ValidationMessage For=@(() => _followCommandViewModel.NewDeckName) style="margin-top: .25rem !important;" />@*simulates mt-1*@
          </div>
          break;
        case FollowType.OldDeck:
          <select class="form-control" @onchange=@(x => x.Value.ToString().Apply(Guid.Parse).Apply(id => _followCommandViewModel.OldDeckId = id))>
            @foreach (var deck in _callersDecks) {
              <option value=@deck.Id selected=@(_followCommandViewModel.OldDeckId == deck.Id)>
                @deck.Name
              </option>
            }
          </select>
          break;
        default:
          break;
      }
      @if (_conflictingRevisionIdsByDeckId.Any()) {
        <div class="mt-3 p-3 border border-warning rounded">
          <div class="mb-3">
            You already have some cards from <a href="deck/@Deck.Id">@Deck.Name</a> in your own decks:
          </div>
          <div>
            @foreach (var (deckId, conflictingRevisionIds) in _conflictingRevisionIdsByDeckId) {
              <div class="card">
                <div class="card-header ">
                  <h5 class="mb-0">@_callersDecks.Single(x => x.Id == deckId).Name</h5>
                </div>
                <div class="card-body">
                  @foreach (var conflictingRevisionId in conflictingRevisionIds) {
                    <a href="my/concept?revision=@conflictingRevisionId">
                      @conflictingRevisionId
                    </a>
                  }
                </div>
              </div>
            }
          </div>
          <div class="my-3">
            A card may only be in one deck. Select how to proceed:
          </div>
          <div class="btn-group" role="group">
            <button type="button" class="btn btn-@_IsSelected(true)primary" @onclick=@(() => _SetEditExisting(true))>
              Migrate cards to <i>@(_followCommandViewModel.FollowType == FollowType.NewDeck ? _followCommandViewModel.NewDeckName : _callersDecks.Single(d => d.Id == _followCommandViewModel.OldDeckId).Name)</i>
            </button>
            <button type="button" class="btn btn-@_IsSelected(false)primary" @onclick=@(() => _SetEditExisting(false))>
              Leave cards in their current decks
            </button>
          </div>
        </div>
      }
      <FluentValidator />
    </BSModalBody>
    <BSModalFooter>
      <BSButton Color="Color.Secondary" OnClick=_modal.Hide type="button">
        Cancel
      </BSButton>
      <BSButton Color="Color.Primary" type="submit">
        @if (_followCommandViewModel.NotifyOfAnyNewChanges) {
          @if (_followCommandViewModel.FollowType == FollowType.NoDeck) {
            <span>Follow</span>
          } else {
            <span>Follow and add to deck</span>
          }
        } else {
          @if (_followCommandViewModel.FollowType == FollowType.NoDeck) {
            <span>Close</span>
          } else {
            <span>Add to deck</span>
          }
        }
      </BSButton>
    </BSModalFooter>
  </EditForm>
</BSModal>

@code {
  private BSModal _modal;
  [Parameter] public Domain.Projection.Kvs.Deck Deck { get; set; }
  private List<Domain.Summary.PrivateDeck> _callersDecks { get; set; }
  private FollowCommandViewModel _followCommandViewModel = new FollowCommandViewModel();
  private List<Tuple<Guid, List<Guid>>> _conflictingRevisionIdsByDeckId = new List<Tuple<Guid, List<Guid>>>();

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _callersDecks = await Dexie.GetDecks();
    StateHasChanged();
  }

  private async Task _followClicked() {
    _conflictingRevisionIdsByDeckId = new List<Tuple<Guid, List<Guid>>>();
    var decks = await Dexie.GetDecks();
    _followCommandViewModel = new FollowCommandViewModel {
      OldDeckId = decks.First(x => x.IsDefault).Id // medTODO fix
    };
    _modal.Show();
  }

  private async Task _follow() {
    //var r = await DbExecutor.QueryAsync(db => SanitizeDeckRepository.follow(db, Guid.Empty, Deck.Id, _followCommandViewModel.FollowTypeDU(), _followCommandViewModel.NotifyOfAnyNewChanges, _followCommandViewModel.EditExisting));
    //r.Match(
    //  unit => {
    //    Deck.IsFollowed = true;
    //    _modal.Hide();
    //  },
    //  error => {
    //    if (error.TryEditExistingIsNull_RevisionIdsByDeckId(out _conflictingRevisionIdsByDeckId)) {
    //    } else {
    //      ToastService.ShowError(error.GetRealError);
    //    }
    //  });
  }

  private async Task _unfollow() {
    //DbExecutor.QueryAsync(db => SanitizeDeckRepository.unfollow(db, Guid.Empty, Deck.Id)).Match(ToastService, _ =>
    //  Deck.IsFollowed = false
    //);
  }

  private void _SetFollowType(FollowType followType) =>
    _followCommandViewModel.FollowType = followType;

  private void _SetEditExisting(bool editExisting) =>
    _followCommandViewModel.EditExisting = FSharpOption<bool>.Some(editExisting);

  private string _IsSelected(FollowType followType) =>
    followType == _followCommandViewModel.FollowType
    ? ""
    : "outline-";

  private string _IsSelected(bool editExisting) =>
    editExisting == _followCommandViewModel.EditExisting?.Value
    ? ""
    : "outline-";

}
