@page "/deck/explore"

@using static FSharpx.FSharpOption
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using System.Collections.Generic
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using static CardOverflow.Api.SanitizeDeckRepository
@inject DbExecutor DbExecutor
@inject Api.Elsea.IClient Elsea

<div class="d-flex justify-content-between align-items-center">
  <EditForm OnValidSubmit=@_SearchClicked Model=@_searchCommand class="form-inline input-group">
    <InputText class="form-control" placeholder="Search" aria-label="Search" @bind-Value=@_searchCommand.Query />
    <button class="btn btn-primary" type="submit">
      <span class="oi oi-magnifying-glass" />
    </button>
    <span class="m-2">Sort by:</span>
    <select class="form-control col-2" @onchange=@(x => x.Value.ToString().Pipe(int.Parse).Do(id => _searchCommand.Order = (SearchOrder)id))>
      @foreach (var order in Enum.GetNames(typeof(SearchOrder))) {
        <option value=@((int) Enum.Parse(typeof(SearchOrder), order))>@order</option>
      }
    </select>
    <DataAnnotationsValidator />
    <ValidationSummary />
  </EditForm>
</div>
@if (_decks == null) {
  <p><em>Loading...</em></p>
} else if (_decks.Count == 0) {
  <p>No results.</p>
} else {
  <table class="table">
    <tr>
      <th>Followers</th>
      <th></th>
      <th>Author</th>
    </tr>
    @foreach (var deck in _decks) {
      <tr>
        <td>
          @deck.SourceOf
        </td>
        <td>
          <a href="deck/@deck.Id">
            @deck.Name
          </a>
        </td>
        <td>
          <a href="user/@deck.AuthorId">
            @deck.Author
          </a>
        </td>
      </tr>
    }
  </table>
  <div class="text-center">
    <button type="button" class="btn btn-primary" disabled=@(!_canLoadMore) @onclick=@_LoadMore>
      @if (_canLoadMore) {
        <span>Load more</span>
      } else {
        <span>That's it!</span>
      }
    </button>
  </div>
}

@code {
  private List<Domain.Projection.DeckSearch> _decks = new ();
  private SearchCommand _searchCommand = new SearchCommand { Query = "" };
  private bool _canLoadMore;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    await _LoadMore();
    StateHasChanged();
  }

  private async Task _LoadMore() {
    var searchResults = await Elsea.SearchDeck(_searchCommand.Query, 1).ToTask(); // highTODO Pass in the page number. This entire file needs pagination a la ExploreTemplate.razor
    _decks = searchResults.Results.ToList();
  }

  private Task _SearchClicked() {
    _decks = new ();
    return _LoadMore();
  }

}
