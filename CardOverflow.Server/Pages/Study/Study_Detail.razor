@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject DbExecutor DbExecutor
@inject Scheduler Scheduler
@inject TimeProvider TimeProvider
@inject IJSRuntime Js
@inject IToastService ToastService

@if (batch == null) {
  <p><em>Loading...</em></p>
} else if (!batch.Any()) {
  <h1 class="text-center">No cards due!</h1>
  <h1 class="text-center">üëç</h1>
} else {
  // tabindex="0" makes keyboard shortcuts work
  <div class="study-content" tabindex="0" style="outline: none;" @onkeydown=@OnKeyDown @onclick=@FocusButton>
    <iframe sandbox="allow-scripts" class="study-iframe" srcdoc=@iframeSrcdoc></iframe>
    <div class="study-footer d-flex justify-content-between">
      <div>
        @if (isFront) {
          <button class="btn btn-study btn-primary" @onclick=@ShowBack @ref="ShowAnswerButton">Show answer</button>
        } else {
          <button class="btn btn-study btn-danger" @onclick=@(() => SaveScore(Score.Again))>
            <div>
              Again
            </div>
            <div>
              @AgainInterval
            </div>
          </button>
          <button class="btn btn-study btn-warning" @onclick=@(() => SaveScore(Score.Hard))>
            <div>
              Hard
            </div>
            <div>
              @HardInterval
            </div>
          </button>
          <button class="btn btn-study btn-primary" @onclick=@(() => SaveScore(Score.Good)) @ref="GoodButton">
            <div>
              Good
            </div>
            <div>
              @GoodInterval
            </div>
          </button>
          <button class="btn btn-study btn-success" @onclick=@(() => SaveScore(Score.Easy))>
            <div>
              Easy
            </div>
            <div>
              @EasyInterval
            </div>
          </button>
        }
      </div>
      <div>
        @transcript
        @if (isBlindMode) {
          <button class="btn btn-study btn-primary" @onclick=@DisableBlindMode>Disable blind mode</button>
        } else {
          <button class="btn btn-study btn-primary" @onclick=@EnableBlindMode>Enable blind mode</button>
        }
      </div>
    </div>
  </div>
}

@code {
  string iframeSrcdoc;
  bool isFront;
  [CascadingParameter] Task<Domain.User.Events.Summary> UserTask { get; set; }
  private Domain.User.Events.Summary _user = UserSummary.init;
  [Parameter] public Guid DeckId { get; set; }
  List<FSharpResult<QuizCard, string>> batch;
  Instant frontVisible;
  string transcript;
  bool isBlindMode;
  ElementReference GoodButton;
  ElementReference ShowAnswerButton;
  bool isRendered;
  string AgainInterval;
  string HardInterval;
  string GoodInterval;
  string EasyInterval;

  private async Task loadCards() {
    var x = await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getQuizBatch(db, _user.Id, DeckId));
    if (x.IsOk) {
      batch ??= new List<FSharpResult<QuizCard, string>>();
      batch.AddRange(x.ResultValue);
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    await loadCards();
    if (batch.Any()) {
      await ShowFront();
    }
    StateHasChanged();
  }

  protected override void OnAfterRender(bool firstRender) {
    isRendered = true;
  }

  async Task SaveScore(Score score) {
    var (timeInterval, intervalOrSteps, easeFactor) = Scheduler.Calculate(batch.First().ResultValue, score);
    await DbExecutor.CommandAsync(db => SanitizeHistoryRepository.AddAndSaveAsync(db, batch.First().ResultValue.CardId, score, TimeProvider.utcNow, timeInterval, easeFactor, TimeProvider.utcNow - frontVisible, intervalOrSteps));
    // medTODO needs `undo review` support
    batch.RemoveAt(0);
    await ShowFront();
  }

  async Task FocusButton() =>
    await (
      isFront
      ? ShowAnswerButton
      : GoodButton
    ).Focus(Js);


  async Task ShowFront() {
    frontVisible = TimeProvider.utcNow;
    if (batch.First().IsOk) {
      isFront = true;
      iframeSrcdoc = batch.First().ResultValue.Front;
      if (isRendered) {
        StateHasChanged();
        await ShowAnswerButton.Focus(Js);
      }
    } else {
      ToastService.ShowError(batch.First().ErrorValue);
    }
    StateHasChanged();
    if (batch.Count() <= 1) {
      await loadCards();
    }
  }

  async Task ShowBack() {
    isFront = false;
    iframeSrcdoc = batch.First().ResultValue.Back;
    var (again, hard, good, easy) = Scheduler.Intervals(batch.First().ResultValue);
    AgainInterval = again;
    HardInterval = hard;
    GoodInterval = good;
    EasyInterval = easy;
    if (isRendered) {
      await Task.Delay(50); // the Focus below needs this. lowTODO put focusElement in OnAfterRenderAsync
      await GoodButton.Focus(Js);
    }
  }

  async Task EnableBlindMode() {
    await Js.InvokeAsync<object>("Listen", DotNetObjectReference.Create(this));
    isBlindMode = true;
    await Speak(batch.First().ResultValue.FrontSynthVoice);
  }

  async Task Speak(string msg) =>
    await Js.InvokeAsync<object>("Speak", msg);

  async Task DisableBlindMode() {
    await Js.InvokeAsync<object>("StopListening", DotNetObjectReference.Create(this));
    isBlindMode = false;
  }

  [JSInvokable]
  public async Task<string> GetTranscript(string rawTranscript) {
    this.transcript = rawTranscript.Trim().ToLower();
    StateHasChanged();
    switch (this.transcript) {
      case "what":
        if (isFront == true) {
          await Speak(batch.First().ResultValue.FrontSynthVoice);
        } else {
          await Speak(batch.First().ResultValue.BackSynthVoice);
        }
        break;
      case "tell me":
        await ShowBack();
        await Speak(batch.First().ResultValue.BackSynthVoice);
        break;
      case "again":
        await SaveScore(Score.Again);
        await Speak(batch.First().ResultValue.FrontSynthVoice);
        break;
      case "hard":
        await SaveScore(Score.Hard);
        await Speak(batch.First().ResultValue.FrontSynthVoice);
        break;
      case "good":
        await SaveScore(Score.Good);
        await Speak(batch.First().ResultValue.FrontSynthVoice);
        break;
      case "easy":
        await SaveScore(Score.Easy);
        await Speak(batch.First().ResultValue.FrontSynthVoice);
        break;
      default:
        break;
    }
    return "C# received: " + this.transcript;
  }

  Task OnKeyDown(KeyboardEventArgs eventArgs) {
    if (isFront && (eventArgs.Key == "ArrowDown" || eventArgs.Key == "ArrowRight")) {
      return ShowBack();
    } else if (!isFront) {
      return eventArgs.Key switch {
        "0" => SaveScore(Score.Again),
        "1" => SaveScore(Score.Hard),
        "2" => SaveScore(Score.Good),
        "3" => SaveScore(Score.Easy),
        _ => Task.CompletedTask
      };
    }
    return Task.CompletedTask;
  }

}
