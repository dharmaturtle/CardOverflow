@page "/study"
@attribute [Authorize]
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Shared
@using static Domain.Projection
@inject DbExecutor DbExecutor
@inject Scheduler Scheduler
@inject TimeProvider TimeProvider
@inject IJSRuntime Js
@inject IToastService ToastService
@inject CardOverflow.Server.Dexie Dexie

@if (_selectedDeck == null) {
  <div class="container">
    <Heatmap />
    <table class="table">
      <tr>
        <th></th>
        <th>Due</th>
      </tr>
      @foreach (var deck in _decks) {
        <tr>
          <td>
            <button @onclick=@(() => _selectedDeck = deck) class="btn btn-link">
              @deck.Name
            </button>
          </td>
          <td>
            @deck.DueCount
          </td>
        </tr>
      }
    </table>
  </div>
} else {
  <Study_Detail DeckId=@_selectedDeck.Id />
}

@code {
  [CascadingParameter] Task<Domain.Summary.User> UserTask { get; set; }
  private List<ViewDeck> _decks = new List<ViewDeck>();
  private ViewDeck _selectedDeck;

  protected override async Task OnInitializedAsync() {
    var user = await UserTask;
    _decks = await Dexie.GetViewDecks(user.DefaultDeckId);
  }

}
