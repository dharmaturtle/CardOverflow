@page "/diff/deck/{TheirDeckId:guid}/{MyDeckId:guid}"

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Server.Pages.Concept
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using ThoughtDesign.WebLibrary
@using Microsoft.FSharp.Collections
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (_diffState == null || _theirDeck == null || _myDeck == null) {
  <span>Loading...</span>
} else {
  <div class="row align-items-center text-center h3 border-bottom mb-3 pb-3">
    <div class="col">
      <div>
        <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
      </div>
      <small>
        by <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>
      </small>
    </div>
    <div class="col-1">
      vs.
    </div>
    <div class="col">
      <div>
        <a href="deck/@_myDeck.Id">@_myDeck.Name</a>
      </div>
      <small>
        by <a href="user/@_myDeck.AuthorId">@_myDeck.AuthorName</a>
      </small>
    </div>
  </div>
  @if (_diffState.AddedConcept.Any()) {
    <div class="row mb-5">
      <div class="col text-center">
        <div class="card">
          <h4 class="card-header">
            Collect to sync with <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>'s <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
          </h4>
          <div class="card-body">
            @foreach (var ids in _diffState.AddedConcept) {
              <div>
                <CollectToggles Ids=@(new ConceptRevisionIds(ids.ConceptId, ids.ExampleId, ids.RevisionId))
                                CardCount=1
                                DeckId=@(FSharpOption<Guid>.Some(MyDeckId))
                                UpdateCollectedIds=@(async _ => {
                                                    _diffState.Unchanged = _diffState.Unchanged.ToList()
                                                      .Concat(_diffState.AddedConcept.Where(x => x.ConceptId == ids.ConceptId))
                                                      .ToFList();
                                                    _diffState.AddedConcept = _diffState.AddedConcept.Where(x => x.ConceptId != ids.ConceptId).ToFList();
                                                  }) />
                <Deck_CardPreview RevisionId=@ids.RevisionId Index=@ids.Index />
                @OtherDeckCheck(ids.DeckId, "Collecting")
              </div>
            }
          </div>
        </div>
      </div>
      <div class="col"></div>
    </div>
  }
  @if (_diffState.RemovedConcept.Any()) {
    <div class="row mb-5">
      <div class="col"></div>
      <div class="col text-center">
        <div class="card">
          <h4 class="card-header">
            Discard to sync with <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>'s <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
          </h4>
          <div class="card-body">
            @foreach (var ids in _diffState.RemovedConcept) {
              var ids2 = new ConceptRevisionIds(ids.ConceptId, ids.ExampleId, ids.RevisionId);
              <div>
                <CollectToggles Ids=@ids2
                                CardCount=1
                                DeckId=@(FSharpOption<Guid>.Some(MyDeckId))
                                CollectedIds=@(FSharpOption<UpsertIds>.Some(ids2.ToUpsertIds(FList.Singleton(ids.CardId))))
                                UpdateCollectedIds=@(_ => _diffState.RemovedConcept = _diffState.RemovedConcept.Where(x => x.ConceptId != ids.ConceptId).ToFList()) />
                <Deck_CardPreview RevisionId=@ids.RevisionId Index=@ids.Index />
                @OtherDeckCheck(ids.DeckId, "Discarding")
              </div>
            }
          </div>
        </div>
      </div>
    </div>
  }
  @if (_diffState.ExampleChanged.Any()) {
    <div class="row mb-5">
      <div class="col-3"></div>
      <div class="col-6 text-center">
        <div class="card">
          <h4 class="card-header">
            Switch example to sync with <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>'s <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
          </h4>
          <div class="card-body">
            @foreach (var (theirs, mine) in _diffState.ExampleChanged) {
              <div>
                <CollectToggles Ids=@(new ConceptRevisionIds(theirs.ConceptId, theirs.ExampleId, theirs.RevisionId))
                                CardCount=1
                                DeckId=@(FSharpOption<Guid>.Some(MyDeckId))
                                CollectedIds=@(FSharpOption<UpsertIds>.Some(new UpsertIds(mine.ConceptId, mine.ExampleId, mine.RevisionId, FList.Singleton(mine.CardId))))
                                UpdateCollectedIds=@(async _ => {
                                                    _diffState.Unchanged = _diffState.Unchanged.ToList()
                                                      .Concat(_diffState.ExampleChanged.Where(x => x.Item2.ConceptId == mine.ConceptId).Select(x => x.Item1))
                                                      .ToFList();
                                                    _diffState.ExampleChanged = _diffState.ExampleChanged.Where(x => x.Item2.ConceptId != mine.ConceptId).ToFList();
                                                  }) />
                Switch from
                <Deck_CardPreview RevisionId=@mine.RevisionId Index=@mine.Index ShowId=false />
                to
                <Deck_CardPreview RevisionId=@theirs.RevisionId Index=@theirs.Index ShowId=false />
                <a href="conceptdiff/@mine.RevisionId/@theirs.RevisionId" class="btn btn-info px-2 py-0" title="Go to diff.">
                  &Delta;
                </a>
                @OtherDeckCheck(mine.DeckId, "Switching")
              </div>
            }
          </div>
        </div>
      </div>
      <div class="col-3"></div>
    </div>
  }
  @if (_diffState.RevisionChanged.Any()) {
    <div class="row mb-5">
      <div class="col-3"></div>
      <div class="col-6 text-center">
        <div class="card">
          <h4 class="card-header">
            Update to sync with <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>'s <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
          </h4>
          <div class="card-body">
            @foreach (var (theirs, mine) in _diffState.RevisionChanged) {
              <div>
                <CollectToggles Ids=@(new ConceptRevisionIds(theirs.ConceptId, theirs.ExampleId, theirs.RevisionId))
                                CardCount=1
                                DeckId=@(FSharpOption<Guid>.Some(MyDeckId))
                                CollectedIds=@(FSharpOption<UpsertIds>.Some(new UpsertIds(mine.ConceptId, mine.ExampleId, mine.RevisionId, FList.Singleton(mine.CardId))))
                                IsExample=@true
                                UpdateCollectedIds=@(async _ => {
                                                    _diffState.Unchanged = _diffState.Unchanged.ToList()
                                                      .Concat(_diffState.RevisionChanged.Where(x => x.Item2.ConceptId == mine.ConceptId).Select(x => x.Item1))
                                                      .ToFList();
                                                    _diffState.RevisionChanged = _diffState.RevisionChanged.Where(x => x.Item2.ConceptId != mine.ConceptId).ToFList();
                                                  }) />
                Update from
                <Deck_CardPreview RevisionId=@mine.RevisionId Index=@mine.Index ShowId=@false />
                to
                <Deck_CardPreview RevisionId=@theirs.RevisionId Index=@theirs.Index ShowId=@false />
                <a href="conceptdiff/@mine.RevisionId/@theirs.RevisionId" class="btn btn-info px-2 py-0" title="Go to diff.">
                  &Delta;
                </a>
                @OtherDeckCheck(mine.DeckId, "Updating")
              </div>
            }
          </div>
        </div>
      </div>
      <div class="col-3"></div>
    </div>
  }
  @if (_diffState.MoveToAnotherDeck.Any()) {
    <div class="row mb-5">
      <div class="col-3"></div>
      <div class="col-6 text-center">
        <div class="card">
          <h4 class="card-header">
            Move extraneous cards to another deck to sync with <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>'s <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
          </h4>
          <div class="card-body">
            @foreach (var mine in _diffState.MoveToAnotherDeck) {
              <Deck_MoveToAnotherDeck Decks=@_decks Mine=@mine Remove=@(() => _diffState.MoveToAnotherDeck = _diffState.MoveToAnotherDeck.Where(x => x != mine).ToFList()) />
            }
          </div>
        </div>
      </div>
      <div class="col-3"></div>
    </div>
  }
  @if (_diffState.Unchanged.Any()) {
    <div class="row">
      <div class="col-3"></div>
      <div class="col-6 text-center">
        <div class="card">
          <h4 class="card-header">
            Synced
          </h4>
          <div class="card-body">
            @foreach (var unchanged in _diffState.Unchanged) {
              <Deck_CardPreview RevisionId=@unchanged.RevisionId Index=@unchanged.Index />
            }
          </div>
        </div>
      </div>
      <div class="col-3"></div>
    </div>
  }
}

@code {
  [CascadingParameter] Task<Domain.User.Events.Summary> UserTask { get; set; }
  private Domain.User.Events.Summary _user = UserSummary.init;
  [Parameter] public Guid TheirDeckId { get; set; }
  private DeckWithFollowMeta _theirDeck;
  [Parameter] public Guid MyDeckId { get; set; }
  private DeckWithFollowMeta _myDeck;
  private DiffStateSummary _diffState;
  private List<SimpleDeck> _decks;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.diff(db, _user.Id, TheirDeckId, MyDeckId)).Match(ToastService, async x => {
      _diffState = x;
      if (_diffState.DeckIds.Any(x => x != MyDeckId && x != TheirDeckId) || _diffState.MoveToAnotherDeck.Any()) {
        _decks = await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getSimple(db, _user.Id));
      }
    });
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getDeckWithFollowMeta(db, _user.Id, TheirDeckId)).Match(ToastService, x => _theirDeck = x);
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getDeckWithFollowMeta(db, _user.Id, MyDeckId)).Match(ToastService, x => _myDeck = x);
    StateHasChanged();
  }

  private RenderFragment OtherDeckCheck(Guid cardsDeckId, string verb) =>
    cardsDeckId == MyDeckId || cardsDeckId == TheirDeckId
    ? (RenderFragment)null
    : @<span>
         @verb will move from
         <a href="deck/@cardsDeckId">@(_decks.Single(x => x.Id == cardsDeckId).Name)</a>
         to
         <a href="deck/@MyDeckId">@(_myDeck.Name)</a>.
       </span>;

}
