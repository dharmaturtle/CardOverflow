@page "/conceptdiff/{A_ExampleId:guid}.{A_Ordinal:int}"
@page "/conceptdiff/{A_ExampleId:guid}.{A_Ordinal:int}/{B_ExampleId:guid}.{B_Ordinal:int}"
@page "/conceptdiff/{A_ExampleId:guid}.{A_Ordinal:int}/{ATitle}/{B_ExampleId:guid}.{B_Ordinal:int}/{BTitle}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using System.Linq
@using HtmlDiff
@using DiffPlex;
@using ThoughtDesign.WebLibrary;
@using DiffPlex.DiffBuilder;
@using BlazorTextDiff;
@using Microsoft.FSharp.Collections
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor
@inject UserProvider UserProvider
@inject StackAppender StackAppender
@inject Dexie Dexie
@* BlazorStrap's BSTabBase is causing the following exception on page load; ignore it'
  System.ObjectDisposedException: Cannot process pending renders after the renderer has been disposed.
  Object name: 'Renderer'.
     at Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessPendingRender()
     at Microsoft.AspNetCore.Components.RenderTree.Renderer.AddToRenderQueue(Int32 componentId, RenderFragment renderFragment)
     at Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged()
     at Microsoft.AspNetCore.Components.Rendering.RendererSynchronizationContextDispatcher.InvokeAsync(Action workItem)
     at BlazorStrap.BSTabGroupBase.set_Selected(BSTabBase value)
     at BlazorStrap.BSTabBase.Dispose(Boolean disposing)
     at BlazorStrap.BSTabBase.Dispose()
     at Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose(Boolean disposing)
*@

@if (_a == null || _b == null) {
  <p><em>@_loadingMessage</em></p>
} else {
  <div class="row">
    <div class="col-sm">
      <HoverPreview IsCollected=@_aIsCollected Padding="0">
        <ResizingIframeExample RevisionId=@A_RevisionId.Item1 MaxIndexInclusive=@_a.MaxIndexInclusive Back />
      </HoverPreview>
      <a href="revision/@A_RevisionId">
        @(ATitle ?? "Old Concept")
      </a>
      @if (_a.Template.Id != _b.Template.Id) {
        <span>
          &nbsp;and&nbsp;
        </span>
        <a href="templaterevision/@_a.Template.Id">
          Old Template
        </a>
      }
      @if (_aIsCollected && !_bIsCollected && _userId.HasValue) {
        <button class="float-right btn btn-sm btn-success" @onclick=@_GetNewConcept>
          Get New Concept
        </button>
      }
    </div>
    <div class="col-sm">
      <HoverPreview IsCollected=@_bIsCollected Padding="0">
        <ResizingIframeExample RevisionId=@B_RevisionId.Item1 MaxIndexInclusive=@_b.MaxIndexInclusive Back />
      </HoverPreview>
      <a href="revision/@B_RevisionId">
        @(BTitle ?? "New Concept")
      </a>
      @if (_a.Template.Id != _b.Template.Id) {
        <span>
          &nbsp;and&nbsp;
        </span>
        <a href="templaterevision/@_b.Template.Id">
          New Template
        </a>
      } else {
        <a href="templaterevision/@_a.Template.Id" class="float-right">
          Template
        </a>
      }
    </div>
  </div>
  <BSTabGroup>
    <BSTabList>
      <BSTab>
        <BSTabLabel>
          Holistic
          @if (_HasDifferences(_holisticDiffs().SelectMany(x => new List<string> { x.Front, x.Back }).ToList())) {
            <i class="fas fa-asterisk" title="Indicates that a difference exists."></i>
          }
        </BSTabLabel>
        <BSTabContent>
          @foreach (var diff in _holisticDiffs()) {
            <h4>Front</h4>
            <iframe srcdoc=@diff.Front style="width: 100%; height: 40vh; resize:vertical;" />
            <h4>Back</h4>
            <iframe srcdoc=@diff.Back style="width: 100%; height: 40vh; resize:vertical;" />
          }
        </BSTabContent>
      </BSTab>
      <BSTab>
        <BSTabLabel>
          Holistic detailed
          @if (_conceptZips().Any(x => x.AFront != x.BFront || x.ABack != x.BBack)) {
            <i class="fas fa-asterisk" title="Indicates that a difference exists."></i>
          }
        </BSTabLabel>
        <BSTabContent>
          @foreach (var zip in _conceptZips()) {
            <TextDiff OldText=@zip.AFront NewText=@zip.BFront CollapseContent=true MaxHeight="-1">
              <Header>
                <h6 style="padding: 12px; margin: 0px;">
                  Front
                  <span class="badge badge-primary">@($"{context.Modifications} Line Modifications")</span>
                  <span class="badge badge-danger">@($"{context.Deletions} Line Deletions")</span>
                  <span class="badge badge-success">@($"{context.Additions} Line Additions")</span>
                </h6>
              </Header>
            </TextDiff>
            <TextDiff OldText=@zip.ABack NewText=@zip.BBack CollapseContent=true MaxHeight="-1">
              <Header>
                <h6 style="padding: 12px; margin: 0px;">
                  Back
                  <span class="badge badge-primary">@($"{context.Modifications} Line Modifications")</span>
                  <span class="badge badge-danger">@($"{context.Deletions} Line Deletions")</span>
                  <span class="badge badge-success">@($"{context.Additions} Line Additions")</span>
                </h6>
              </Header>
            </TextDiff>
          }
        </BSTabContent>
      </BSTab>
      <BSTab>
        <BSTabLabel>
          Fields
          @if (_fieldNames.Any(name => _HasDifferences(_fieldDiff(name)))) {
            <i class="fas fa-asterisk" title="Indicates that a difference exists."></i>
          }
        </BSTabLabel>
        <BSTabContent>
          @foreach (var name in _fieldNames) {
            <h4>@name</h4>
            <iframe srcdoc=@_fieldDiff(name) style="width: 100%; height: 30vh; resize:vertical;" />
          }
        </BSTabContent>
      </BSTab>
      <BSTab>
        <BSTabLabel>
          Fields detailed
          @if (_fieldNames.Any(name => _value(_a, name) != _value(_b, name))) {
            <i class="fas fa-asterisk" title="Indicates that a difference exists."></i>
          }
        </BSTabLabel>
        <BSTabContent>
          @foreach (var name in _fieldNames) {
            <TextDiff OldText=@_value(_a, name) NewText=@_value(_b, name) CollapseContent=true MaxHeight="-1">
              <Header>
                <h6 style="padding: 12px; margin: 0px;">
                  @name
                  <span class="badge badge-primary">@($"{context.Modifications} Line Modifications")</span>
                  <span class="badge badge-danger">@($"{context.Deletions} Line Deletions")</span>
                  <span class="badge badge-success">@($"{context.Additions} Line Additions")</span>
                </h6>
              </Header>
            </TextDiff>
          }
        </BSTabContent>
      </BSTab>
      <BSTab>
        <BSTabLabel>
          Templates
          @if (_HasDifferences(_XemplateHolistic().SelectMany(x => new List<string> { x.Front, x.Back }).ToList())) {
            <i class="fas fa-asterisk" title="Indicates that a difference exists."></i>
          }
        </BSTabLabel>
        <BSTabContent>
          @foreach (var template in _XemplateHolistic()) {
            <h4>Question Template</h4>
            <iframe srcdoc=@template.Front style="width: 100%; height: 40vh; resize:vertical;" />
            <h4>Answer Template</h4>
            <iframe srcdoc=@template.Back style="width: 100%; height: 40vh; resize:vertical;" />
          }
        </BSTabContent>
      </BSTab>
      <BSTab>
        <BSTabLabel>
          Templates detailed
          @if (
   _templateFields(_a) != _templateFields(_b) ||
   _XemplateDetailed().Any(x => x.AFront != x.BFront || x.ABack != x.BBack) ||
   _a.Template.Css != _b.Template.Css) {
  <i class="fas fa-asterisk" title="Indicates that a difference exists."></i>
}
        </BSTabLabel>
        <BSTabContent>
          <TextDiff OldText=@_templateFields(_a) NewText=@_templateFields(_b) CollapseContent=true MaxHeight="-1">
            <Header>
              <h6 style="padding: 12px; margin: 0px;">
                Fields
                <span class="badge badge-primary">@($"{context.Modifications} Line Modifications")</span>
                <span class="badge badge-danger">@($"{context.Deletions} Line Deletions")</span>
                <span class="badge badge-success">@($"{context.Additions} Line Additions")</span>
              </h6>
            </Header>
          </TextDiff>
          @foreach (var template in _XemplateDetailed()) {
            <TextDiff OldText=@template.AFront NewText=@template.BFront CollapseContent=true MaxHeight="-1">
              <Header>
                <h6 style="padding: 12px; margin: 0px;">
                  Question Template
                  <span class="badge badge-primary">@($"{context.Modifications} Line Modifications")</span>
                  <span class="badge badge-danger">@($"{context.Deletions} Line Deletions")</span>
                  <span class="badge badge-success">@($"{context.Additions} Line Additions")</span>
                </h6>
              </Header>
            </TextDiff>
            <TextDiff OldText=@template.ABack NewText=@template.BBack CollapseContent=true MaxHeight="-1">
              <Header>
                <h6 style="padding: 12px; margin: 0px;">
                  Answer Template
                  <span class="badge badge-primary">@($"{context.Modifications} Line Modifications")</span>
                  <span class="badge badge-danger">@($"{context.Deletions} Line Deletions")</span>
                  <span class="badge badge-success">@($"{context.Additions} Line Additions")</span>
                </h6>
              </Header>
            </TextDiff>
          }
          <TextDiff OldText=@_a.Template.Css NewText=@_b.Template.Css CollapseContent=true MaxHeight="-1">
            <Header>
              <h6 style="padding: 12px; margin: 0px;">
                CSS
                <span class="badge badge-primary">@($"{context.Modifications} Line Modifications")</span>
                <span class="badge badge-danger">@($"{context.Deletions} Line Deletions")</span>
                <span class="badge badge-success">@($"{context.Additions} Line Additions")</span>
              </h6>
            </Header>
          </TextDiff>
        </BSTabContent>
      </BSTab>
    </BSTabList>
    <BSTabSelectedContent />
  </BSTabGroup>
}

@code {
  private Guid? _userId;
  [Parameter] public Guid A_ExampleId { get; set; }
  [Parameter] public Guid B_ExampleId { get; set; }
  [Parameter] public int A_Ordinal { get; set; }
  [Parameter] public int B_Ordinal { get; set; }
  public Tuple<Guid, int> A_RevisionId => Tuple.Create(A_ExampleId, A_Ordinal);
  public Tuple<Guid, int> B_RevisionId => Tuple.Create(B_ExampleId, B_Ordinal);
  [Parameter] public string ATitle { get; set; }
  [Parameter] public string BTitle { get; set; }
  private string _loadingMessage = "Loading...";
  private Domain.Projection.ExampleInstance _a;
  private Domain.Projection.ExampleInstance _b;
  private bool _aIsCollected;
  private bool _bIsCollected;
  private string _templateFields(Domain.Projection.ExampleInstance instance) => instance.Template.Fields.Select(x => x.Name).Apply(x => string.Join("\r\n", x));
  private List<string> _fieldNames;
  private string _value(Domain.Projection.ExampleInstance instance, string fieldName) => instance.FieldValues.SingleOrDefault(x => x.EditField.Name == fieldName)?.Value ?? "";
  private List<(string AFront, string ABack, string BFront, string BBack)> _conceptZips() =>
    _a.FrontBackFrontSynthBackSynthAll.ZipLongest(_b.FrontBackFrontSynthBackSynthAll, (a, b) =>
      (AFront: a?.Item1 ?? "",
        ABack: a?.Item2 ?? "",
        BFront: b?.Item1 ?? "",
        BBack: b?.Item2 ?? ""
      )).ToList();
  private List<(string Front, string Back)> _holisticDiffs() =>
    _conceptZips().Select(x =>
        (ViewLogic.diff(x.AFront, x.BFront),
        ViewLogic.diff(x.ABack, x.BBack))
      ).ToList();
  private string _fieldDiff(string name) => ViewLogic.diff(_value(_a, name), _value(_b, name));
  private List<(string Front, string Back)> _XemplateHolistic() =>
    _a.Template.FrontBackFrontSynthBackSynth().ZipLongest(_b.Template.FrontBackFrontSynthBackSynth(), (a, b) =>
     (AFront: a?.Item1 ?? "",
       ABack: a?.Item2 ?? "",
       BFront: b?.Item1 ?? "",
       BBack: b?.Item2 ?? ""
     )).Select(x =>
        (ViewLogic.diff(x.AFront, x.BFront),
        ViewLogic.diff(x.ABack, x.BBack))
      ).ToList();
  private List<(string AFront, string ABack, string BFront, string BBack)> _XemplateDetailed() =>
    _a.Template.JustCardTemplates.ZipLongest(_b.Template.JustCardTemplates, (a, b) =>
     (AFront: a?.Front ?? "",
       ABack: a?.Back ?? "",
       BFront: b?.Front ?? "",
       BBack: b?.Back ?? ""
     )).ToList();
  private bool _HasDifferences(string diff) => diff.Contains("<ins ") || diff.Contains("<del ");
  private bool _HasDifferences(List<string> diff) => _HasDifferences(string.Join("", diff));

  private void _OnOk() =>
    _fieldNames =
      _a.FieldValues.Concat(_b.FieldValues)
      .Select(x => x.EditField.Name).Distinct().ToList();

  private void _OnError(string error) {
    ToastService.ShowError(error);
    _loadingMessage = error;
  }

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    _userId = await UserProvider.GetId();
    _a = await Dexie.GetExampleInstance(A_ExampleId, A_Ordinal);
    if (B_ExampleId == default) {
      _b = await Dexie.GetExampleInstance(A_ExampleId);
      B_ExampleId = _b.ExampleId;
      B_Ordinal = _b.Ordinal;
    } else {
      _b = await Dexie.GetExampleInstance(B_ExampleId, B_Ordinal);
    }
    var ao = await Dexie.GetStackByExample(A_ExampleId);
    if (ao.IsSome()) _aIsCollected = ao.Value.ExampleRevisionId == A_RevisionId;
    var bo = await Dexie.GetStackByExample(B_ExampleId);
    if (bo.IsSome()) _bIsCollected = bo.Value.ExampleRevisionId == B_RevisionId;
    _OnOk();
  }

  private async Task _GetNewConcept() {
    var _ = await StackAppender.Collect(B_RevisionId, FSharpOption<Guid>.None);
    var a = await Dexie.GetStackByExample(A_RevisionId.Item1);
    var b = await Dexie.GetStackByExample(B_RevisionId.Item1);
    if (a.IsSome()) _aIsCollected = a.Value.ExampleRevisionId == A_RevisionId;
    if (b.IsSome()) _bIsCollected = b.Value.ExampleRevisionId == B_RevisionId;
  }

}
