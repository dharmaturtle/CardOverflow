@page "/user/{OtherUserId:guid}"

@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using CardOverflow.Server.Pages.Deck
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

@if (_profile == null || _othersDecks == null) {
  <span>@_loadingMessage</span>
} else {
  <h1>
    @_profile.DisplayName
  </h1>
  @if (_othersDecks.Any()) {
    <h5>
      Public Decks
    </h5>
    <table class="table">
      @foreach (var deck in _othersDecks) {
        <tr>
          <td>
            <a href="deck/@deck.Id">
              @deck.Name
            </a>
          </td>
          <td>
            <FollowButtons Deck=@deck />
          </td>
        </tr>
      }
    </table>
  }
}

@code {
  [Parameter] public Guid OtherUserId { get; set; }
  private List<DeckWithFollowMeta> _othersDecks;
  private Profile _profile;
  private string _loadingMessage = "Loading...";

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _othersDecks = await DbExecutor.QueryAsync(db => DeckRepository.getPublic(db, Guid.Empty, OtherUserId));
    await DbExecutor.QueryAsync(db => UserRepository.profile(db, OtherUserId)).Match(_OnError, x => _profile = x);
    StateHasChanged();
  }

  private void _OnError(string error) {
    ToastService.ShowError(error);
    _loadingMessage = error;
  }

}
