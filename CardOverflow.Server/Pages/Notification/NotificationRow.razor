@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using static FSharpx.FSharpOption;
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Server.Pages.Concept
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject TimeProvider TimeProvider

<tr>
  <td>
    @Sender()
  </td>
  <td>
    @if (Notification.Message.TryDeckAddedConcept(out var deckAddedConcept)) {
      <span>
        <HoverPreview Padding="0">
          <ResizingIframeExample RevisionId=@(deckAddedConcept.New.RevisionId) Back />
        </HoverPreview>
        @Concept(deckAddedConcept.New.RevisionId)
        added to
        @Sender()&apos;s
        deck
        @Deck(@deckAddedConcept.TheirDeck.Id, deckAddedConcept.TheirDeck.Name).
      </span>
      <div class="float-right">
        <CollectToggles @ref="_addedConceptCollectToggles"
                        Ids=@deckAddedConcept.New
                        CardCount=@deckAddedConcept.NewCardCount
                        DeckId=@_getDeckId(deckAddedConcept.MyDeck)
                        IsExample=@true
                        CollectedIds=@_collectedState
                        UpdateCollectedIds=@(x => _collectedState = x) />
        <button type="button" class="btn btn-primary"
                @onclick=@(async () => await _addedConceptCollectToggles.Collect(async () => await _remove()))>
          Sync & <span class="oi oi-trash"></span>
        </button>
      </div>
    } else if (Notification.Message.TryDeckUpdatedConcept(out var deckUpdatedConcept)) {
      var showBoth = _collectedState.HasValue() && _collectedState.Value.RevisionId != deckUpdatedConcept.New.RevisionId;
      var newId = $"Notification-{Notification.Id}-New";
      var oldId = $"Notification-{Notification.Id}-Old";
      <span>
        @if (showBoth) {
          <BSTooltip Target="@newId" Placement="Placement.Top">Updated</BSTooltip>
        }
        <span id="@newId">
          <HoverPreview Padding="0">
            <ResizingIframeExample RevisionId=@deckUpdatedConcept.New.RevisionId Back />
          </HoverPreview>
        </span>
        @if (showBoth) {
          <BSTooltip Target="@oldId" Placement="Placement.Top">Yours</BSTooltip>
          <span id="@oldId">
            <HoverPreview Padding="0">
              <ResizingIframeExample RevisionId=@_collectedState.Value.RevisionId Back />
            </HoverPreview>
          </span>
          <a href="conceptdiff/@_collectedState.Value.RevisionId/@deckUpdatedConcept.New.RevisionId" class="btn btn-info px-2 py-0" title="Go to diff.">
            &Delta;
          </a>
        }
        @Concept(deckUpdatedConcept.New.RevisionId)
        updated in
        @Sender()&apos;s
        deck
        @Deck(@deckUpdatedConcept.TheirDeck.Id, deckUpdatedConcept.TheirDeck.Name).
      </span>
      <div class="float-right">
        <CollectToggles @ref="_updatedConceptCollectToggles"
                        Ids=@deckUpdatedConcept.New
                        CardCount=@deckUpdatedConcept.NewCardCount
                        DeckId=@_getDeckId(deckUpdatedConcept.MyDeck)
                        IsExample=@true
                        CollectedIds=@_collectedState
                        UpdateCollectedIds=@(x => _collectedState = x) />
        <button type="button" class="btn btn-primary"
                @onclick=@(async () => await _updatedConceptCollectToggles.Collect(async () => await _remove()))>
          Sync & <span class="oi oi-trash"></span>
        </button>
      </div>
    } else if (Notification.Message.TryDeckDeletedConcept(out var deckDeletedConcept)) {
      <span>
        <HoverPreview Padding="0">
          <ResizingIframeExample RevisionId=@(deckDeletedConcept.Deleted.RevisionId) Back />
        </HoverPreview>
        @Concept(deckDeletedConcept.Deleted.RevisionId)
        deleted from
        @Sender()&apos;s
        deck
        @Deck(deckDeletedConcept.TheirDeck.Id, deckDeletedConcept.TheirDeck.Name).
      </span>
      <div class="float-right">
        <CollectToggles @ref="_deletedConceptCollectToggles"
                        Ids=@deckDeletedConcept.Deleted
                        CardCount=@deckDeletedConcept.DeletedCardCount
                        DeckId=@_getDeckId(deckDeletedConcept.MyDeck)
                        IsExample=@true
                        CollectedIds=@_collectedState
                        UpdateCollectedIds=@(x => _collectedState = x) />
        <button type="button" class="btn btn-primary"
                @onclick=@(async () => await _collectedState.Select(_ => {
                             _deletedConceptCollectToggles.OpenDiscardModal(async () => await _remove());
                             return System.Threading.Tasks.Task.CompletedTask;
                           }).GetOrElse(_remove))>
          Sync & <span class="oi oi-trash"></span>
        </button>
      </div>
    }
  </td>
  <td>
    <button type="button" class="btn btn-outline-danger" @onclick=@_remove>
      <span class="oi oi-trash"></span>
    </button>
  </td>
  <td>
    <span title=@(Notification.Created + " UTC")>
      @ViewLogic.timestampToPretty(Notification.Created, TimeProvider.utcNow)
    </span>
  </td>
</tr>

@code {
  [Parameter] public Pure.Notification Notification { get; set; }
  [Parameter] public EventCallback Remove { get; set; }
  private FSharpOption<UpsertIds> _collectedState;
  private CollectToggles _addedConceptCollectToggles;
  private CollectToggles _updatedConceptCollectToggles;
  private CollectToggles _deletedConceptCollectToggles;
  private FSharpOption<Guid> _getDeckId(FSharpOption<IdName> fallbackDeck) =>
    _collectedState.HasValue()
    ? FSharpOption<Guid>.None
    : fallbackDeck.Select(x => x.Id);

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _collectedState =
      Notification.Message.TryDeckAddedConcept(out var deckAddedConcept)
      ? deckAddedConcept.Collected
      : Notification.Message.TryDeckUpdatedConcept(out var deckUpdatedConcept)
      ? deckUpdatedConcept.Collected
      : Notification.Message.TryDeckDeletedConcept(out var deckDeletedConcept)
      ? deckDeletedConcept.Collected
      : FSharpOption<UpsertIds>.None;
    StateHasChanged();
  }

  private async System.Threading.Tasks.Task _remove() {
    await DbExecutor.QueryAsync(db => NotificationRepository.remove(db, Guid.Empty, Notification.Id));
    await Remove.InvokeAsync(null);
  }

  private RenderFragment Sender() =>
  @<a href="user/@Notification.SenderId">@Notification.SenderDisplayName</a>;

private RenderFragment Concept(Guid revisionId) =>
@<a href="concept?revision=@revisionId">
  Concept
</a>;

private RenderFragment Deck(Guid deckId, string deckName) =>
@<span>&quot;<a href="deck/@deckId">@deckName</a>&quot;</span>;

}
