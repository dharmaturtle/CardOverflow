@page "/notifications"

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Server.Pages.Concept
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject TimeProvider TimeProvider

@if (_notifications == null) {
  <p><em>Loading...</em></p>
} else {
  <table class="table">
    <tr>
      <th>Sender</th>
      <th>Message</th>
      <th></th>
      <th></th>
    </tr>
    @foreach (var notification in _notifications) {
      <NotificationRow Notification=@notification Remove=@(() => _remove(notification))/>
    }
  </table>
}
<Pager Details=@_details PageChanged=@PageChanged />

@code {
  [CascadingParameter] Task<Domain.Summary.User> UserTask { get; set; }
  private Domain.Summary.User _user = UserSummary.init;
  private IList<Pure.Notification> _notifications;
  private PagedListDetails _details;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    await PageChanged(1);
    StateHasChanged();
  }

  private async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => NotificationRepository.get(db, _user.Id, pageNumber));
    _details = pagedList.Details;
    _notifications = pagedList.Results.ToList();
  }

  private async Task _remove(Pure.Notification notification) {
    await DbExecutor.QueryAsync(db => NotificationRepository.remove(db, _user.Id, notification.Id));
    _notifications.Remove(notification);
  }

}
