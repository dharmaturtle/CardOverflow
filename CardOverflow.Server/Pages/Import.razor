@page "/import"
@attribute [Authorize]
@using CardOverflow.Sanitation
@using CardOverflow.Entity
@using System.IO
@using Tewr.Blazor.FileReader
@inject IFileReaderService fileReaderService
@inject DbExecutor DbExecutor

<style>
  .droptarget {
    display: block;
    padding: 20px;
    margin-bottom: 10px;
    border: 1px dashed black;
    border-radius: 5px;
  }

  .droptarget-drag {
    border-color: orangered;
    font-weight: bold;
  }
</style>
<h1>Anki Importer</h1>
<div>Imports are currently limited to 1 megabyte files or less.</div>
<div>This <a href="https://ankiweb.net/shared/info/1983204951">plugin</a> or this <a href="https://www.reddit.com/r/Anki/comments/daz4jg/sharing_cards/f1wuo3s/">post</a> may help with selecting what to export.</div>
<div>Importing the same files, decks, or cards multiple times should <em>not</em> cause duplication or other adverse effects.</div>
<div>However, the import process may take a while. My deck of 3600 cards with 30,000 reviews took ~10 minutes to import <em>after</em> the upload.</div>
<div>Try something very small at first. Consider unchecking "Include scheduling information" and "Include media".</div>
<div class=@DropClass
     @ref=@dropTargetElement
     @ondrop=@OnDrop
     @ondragenter=@(e => this.DropClass += " droptarget-drag")
     @ondragleave=@(e => this.DropClass = _dropClass)>
  Drop Anki exports here (*.colpkg or *.apkg)
  @foreach (var fileInfo in FileList) {
    <br />@fileInfo.Name
  }
</div>
<button @onclick=@ReadFile class="btn btn-primary">Import</button>
<button @onclick=@ClearFile class="btn btn-primary">Clear</button>

<textarea style="max-width: 100%;" cols="50" rows="20">@Output</textarea>

@code {
  ElementReference dropTargetElement;
  IFileReaderRef dropReference;
  [CascadingParameter] Task<Domain.User.Events.Summary> UserTask { get; set; }

  const string _dropClass = "droptarget";
  string DropClass { get; set; } = _dropClass;
  string Output { get; set; }
  List<IFileInfo> FileList { get; } = new List<IFileInfo>();

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    dropReference = fileReaderService.CreateReference(dropTargetElement);
    await dropReference.RegisterDropEventsAsync();
  }

  public async Task ClearFile() {
    await dropReference.ClearValue();
    await this.RefreshFileList();
  }

  public async Task OnDrop(DragEventArgs e) {
    Output += "Dropped a file.";
    this.DropClass = _dropClass;
    this.StateHasChanged();
    await this.RefreshFileList();
  }

  private async Task RefreshFileList() {
    this.FileList.Clear();
    foreach (var file in await dropReference.EnumerateFilesAsync()) {
      var fileInfo = await file.ReadFileInfoAsync();
      this.FileList.Add(fileInfo);
    }
    this.StateHasChanged();
  }

  public async Task ReadFile() {
    Output = string.Empty;
    this.StateHasChanged();
    var nl = Environment.NewLine;
    foreach (var file in await dropReference.EnumerateFilesAsync()) {
      var fileInfo = await file.ReadFileInfoAsync();
      if (fileInfo.Size > 1000000) {
        Output += $"{fileInfo.Name} is more than 1 megabyte! Skipping...";
        continue;
      }
      Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Name)}: {fileInfo.Name}{nl}";
      Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Size)}: {fileInfo.Size}{nl}";
      Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Type)}: {fileInfo.Type}{nl}";
      Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.LastModifiedDate)}: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";
      Output += $"Uploading...";
      this.StateHasChanged();

      var downloadPath = SanitizeAnki.ankiExportsDir + "/" + fileInfo.Name + CardOverflow.Pure.Random.cryptographicString(32) + ".ankiTemp";
      var buffer = new byte[4096];
      var count = 0;
      using (var stream = await file.OpenReadAsync()) {
        using (var fileStream = new FileStream(downloadPath, FileMode.Create, FileAccess.Write)) {
          while ((count = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0) {
            Output += $"Read {count} bytes. {stream.Position} / {stream.Length}{nl}";
            this.StateHasChanged();
            await fileStream.WriteAsync(buffer, 0, count);
          }
        }
      }
      Output += $"Done uploading {fileInfo.Name}!{nl}";
      Output += $"Beginning import... this  may take a while.{nl}";
      this.StateHasChanged();

      var user = await UserTask;

      try {
        var x = await DbExecutor.QueryAsync(db => SanitizeAnki.Import(db, downloadPath, user.Id));
        if (x.IsOk) {
          Output += $"Import complete!.{nl}";
        } else {
          Output += $"Error(s) importing: " + x.ErrorValue;
        }
      } catch (Exception) { // medTODO log errors
        Output += "Unexpected errors occured while importing. Please email me and attach the file that you tried to import. Thanks!";
      }
      this.StateHasChanged();
    }

  }
}
