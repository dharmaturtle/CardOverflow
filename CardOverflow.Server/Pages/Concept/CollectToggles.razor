@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

@if (IsConcept) {
  @if (CollectedIds == null) {
    <CollectToggles_Button Css="btn-collect-card"
                           OnClick=@Collect
                           ExampleUsers=@ExampleUsers />

  } else {
    <CollectToggles_Button Css="btn-uncollect-card"
                           OnClick=@(() => _modal.Show())
                           ExampleUsers=@(ExampleUsers + 1) />
  }
} else {
  @if (CollectedIds?.Value?.RevisionId == Ids.RevisionId) {
    <CollectToggles_Button Css="btn-uncollect-card"
                           OnClick=@(() => _modal.Show())
                           ExampleUsers=@(ExampleUsers + 1)
                           RevisionUsers=@(RevisionUsers + 1) />
  } else {
    @if (CollectedIds?.Value?.ExampleId == Ids.ExampleId && IsExample) {
      <CollectToggles_Button Css="btn-collect-card btn-success btn-striped"
                             OnClick=@Collect
                             ExampleUsers=@(ExampleUsers + 1)
                             RevisionUsers=@RevisionUsers />

    } else {
      <CollectToggles_Button Css="btn-collect-card"
                             OnClick=@Collect
                             ExampleUsers=@ExampleUsers
                             RevisionUsers=@RevisionUsers />
    }
  }
}

<BSModal @ref=_modal HideEvent=@(() => _onDiscardSuccess = default)>
  <BSModalHeader OnClick=@_modal.Hide>
    Are you sure you want to discard?
  </BSModalHeader>
  <BSModalBody>
    <div>
      Discarding a card will delete all of its associated Tags and Relationships. However, its History will be maintained. Are you sure you want to discard?
    </div>
    <div class="small">
      <em>Suspending will preserve the above data and prevent the card from appearing when you Study.</em>
    </div>
  </BSModalBody>
  <BSModalFooter>
    <div>
      <BSButton Color="Color.Secondary" OnClick=_modal.Hide type="button">
        Cancel
      </BSButton>
      <BSButton Color="Color.Danger" @onclick=@_Discard>
        Discard
      </BSButton>
    </div>
  </BSModalFooter>
</BSModal>

@code {
  [CascadingParameter] Task<Domain.User.Events.Summary> UserTask { get; set; }
  private Domain.User.Events.Summary _user = UserSummary.init;
  [Parameter] public FSharpOption<UpsertIds> CollectedIds { get; set; }
  [Parameter] public EventCallback<FSharpOption<UpsertIds>> UpdateCollectedIds { get; set; } = new EventCallback<FSharpOption<UpsertIds>>();
  [Parameter] public ConceptRevisionIds Ids { get; set; }
  [Parameter] public int CardCount { get; set; }

  [Parameter] public int? ExampleUsers { get; set; }
  [Parameter] public int? RevisionUsers { get; set; }
  [Parameter] public bool IsExample { get; set; }
  [Parameter] public bool IsConcept { get; set; }
  [Parameter] public FSharpOption<Guid> DeckId { get; set; } = FSharpOption<Guid>.None;
  private BSModal _modal;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
    if (CardCount <= 0) {
      throw new ArgumentOutOfRangeException("Card Count should be larger than 0.");
    }
  }

  public Task Collect() => Collect(() => { });

  public Task Collect(Action onSuccess) {
    if (_user.Id == Guid.Empty) {
      ToastService.ShowError("You need to log in to collect this card.");
      return Task.CompletedTask;
    } else {
      var cardIds = Gulid.Create(CardCount).ToFList();
      return DbExecutor.QueryAsync(db => ConceptRepository.collect(db, _user.Id, Ids.RevisionId, DeckId, cardIds)).Match(ToastService, async ccIds => {
        onSuccess();
        await UpdateCollectedIds.InvokeAsync(FSharpOption<UpsertIds>.Some(Ids.ToUpsertIds(cardIds)));
      });
    }
  }

  private Action _onDiscardSuccess;
  public void OpenDiscardModal(Action onSuccess) {
    _onDiscardSuccess = onSuccess;
    _modal.Show();
  }

  private Task _Discard() =>
    DbExecutor.QueryAsync(db => ConceptRepository.uncollectConcept(db, _user.Id, Ids.ConceptId)).Match(ToastService, async _ => {
      _onDiscardSuccess?.Invoke();
      await UpdateCollectedIds.InvokeAsync(FSharpOption<UpsertIds>.None);
      _modal.Hide();
    });

}
