@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider
@inject UserProvider UserProvider
@inject Dexie Dexie
@inject StackAppender StackAppender

@if (IsConcept) {
  @if (!_collectedExample) {
    <CollectToggles_Button Css="btn-collect-card"
                           OnClick=@Collect
                           ExampleUsers=@ExampleUsers />

  } else {
    <CollectToggles_Button Css="btn-uncollect-card"
                           OnClick=@(() => _modal.Show())
                           ExampleUsers=@(ExampleUsers + 1) />
  }
} else {
  @if (_collectedOrdinal) {
    <CollectToggles_Button Css="btn-uncollect-card"
                           OnClick=@(() => _modal.Show())
                           ExampleUsers=@(ExampleUsers + 1)
                           RevisionUsers=@(RevisionUsers + 1) />
  } else {
    @if (_collectedExample && IsExample) {
      <CollectToggles_Button Css="btn-collect-card btn-success btn-striped"
                             OnClick=@Collect
                             ExampleUsers=@(ExampleUsers + 1)
                             RevisionUsers=@RevisionUsers />

    } else {
      <CollectToggles_Button Css="btn-collect-card"
                             OnClick=@Collect
                             ExampleUsers=@ExampleUsers
                             RevisionUsers=@RevisionUsers />
    }
  }
}

<BSModal @ref=_modal HideEvent=@(() => _onDiscardSuccess = default)>
  <BSModalHeader OnClick=@_modal.Hide>
    Are you sure you want to discard?
  </BSModalHeader>
  <BSModalBody>
    <div>
      Discarding a card will delete all of its associated Tags. However, its History will be maintained. Are you sure you want to discard?
    </div>
    <div class="small">
      <em>Suspending will preserve the above data and prevent the card from appearing when you Study.</em>
    </div>
  </BSModalBody>
  <BSModalFooter>
    <div>
      <BSButton Color="Color.Secondary" OnClick=_modal.Hide type="button">
        Cancel
      </BSButton>
      <BSButton Color="Color.Danger" @onclick=@_Discard>
        Discard
      </BSButton>
    </div>
  </BSModalFooter>
</BSModal>

@code {
  private Guid? _userId;
  [Parameter] public EventCallback<FSharpOption<UpsertIds>> UpdateCollectedIds { get; set; } = new EventCallback<FSharpOption<UpsertIds>>();
  [Parameter] public Tuple<Guid, int> ExampleRevisionId { get; set; }

  [Parameter] public int? ExampleUsers { get; set; }
  [Parameter] public int? RevisionUsers { get; set; }
  [Parameter] public bool IsExample { get; set; }
  [Parameter] public bool IsConcept { get; set; }
  [Parameter] public FSharpOption<Guid> DeckId { get; set; } = FSharpOption<Guid>.None;
  private bool _collectedExample;
  private bool _collectedOrdinal;
  private BSModal _modal;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _userId = await UserProvider.GetId();
    var stack = await Dexie.GetStackByExample(ExampleRevisionId.Item1);
    if (stack.ExampleRevisionId(out var exampleRevisionId)) {
      _collectedExample = true;
      _collectedOrdinal = exampleRevisionId.Item2 == ExampleRevisionId.Item2;
    }
  }

  public Task Collect() => Collect(() => { });

  public async Task Collect(Action onSuccess) {
    if (_userId == null) {
      ToastService.ShowError("You need to log in to collect this card.");
    } else {
      if (await StackAppender.Collect(ExampleRevisionId, DeckId)) {
        onSuccess();
        await UpdateCollectedIds.InvokeAsync(null);
      }
    }
  }

  private Action _onDiscardSuccess;
  public void OpenDiscardModal(Action onSuccess) {
    _onDiscardSuccess = onSuccess;
    _modal.Show();
  }

  private async Task _Discard() {
    var stack = await Dexie.GetStackByExample(ExampleRevisionId.Item1);
    if (stack.IsSome() && await StackAppender.Discard(stack.Value.Id)) {
      _onDiscardSuccess?.Invoke();
      await UpdateCollectedIds.InvokeAsync(FSharpOption<UpsertIds>.None);
      _modal.Hide();
    }
  }

}
