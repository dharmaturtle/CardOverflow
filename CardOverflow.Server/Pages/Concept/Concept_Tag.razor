@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient

<div>
  <div class="d-flex justify-content-between">
    <h4>Tags</h4>
    @if (Concept.IsAnyCollected) {
      @if (_showTagAdder) {
        <TagAdder AddTag=@(x => CollectTag(x.Text)) />
      } else {
        <button class="btn btn-outline-success" @onclick=@(() => _showTagAdder = true)>
          <i class="fas fa-plus"></i>
        </button>
      }
    }
  </div>
  <ul class="d-flex flex-wrap list-unstyled">
    @foreach (var tag in Concept.Tags.Where(x => x.IsCollected).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
      <li class="m-1">
        <button type="button" class="btn btn-outline-collected btn-sm" @onclick=@(() => DeleteTag(tag.Name))>
          <span class="badge badge-success">@tag.Count</span> @tag.Name
        </button>
      </li>
    }
    @foreach (var tag in Concept.Tags.Where(x => !x.IsCollected).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
      <li class="m-1">
        <button type="button" class="btn btn-outline-uncollected btn-sm" @onclick=@(() => CollectTag(tag.Name, false)) disabled=@(!Concept.IsAnyCollected)>
          <span class="badge badge-success">@tag.Count</span> @tag.Name
        </button>
      </li>
    }
  </ul>
</div>

@code {
  [CascadingParameter] Task<Domain.Summary.User> UserTask { get; set; }
  [Parameter] public CardOverflow.Pure.ExploreConcept Concept { get; set; }
  private bool _showTagAdder;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (!Concept.IsAnyCollected) {
      foreach (var tag in Concept.Tags.Where(t => t.IsCollected)) {
        tag.IsCollected = false;
        tag.Count--;
      }
    }
  }

  async Task CollectTag(string name, bool isNew = true) {
    var user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => SanitizeTagRepository.AddTo(db, user.Id, name, Concept.Id));
    if (x.IsOk) {
      if (isNew) {
        Concept.Tags = Concept.Tags.Append(new ViewTag(name, 0, false)).ToList();
      }
      Concept.Tags.Single(t => t.Name == name).IsCollected = true;
      Concept.Tags.Single(t => t.Name == name).Count++;
      StateHasChanged();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  async Task DeleteTag(string tag) {
    var user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => SanitizeTagRepository.DeleteFrom(db, user.Id, tag, Concept.Id));
    if (x.IsOk) {
      Concept.Tags.Single(t => t.Name == tag).IsCollected = false;
      Concept.Tags.Single(t => t.Name == tag).Count--;
      StateHasChanged();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

}
