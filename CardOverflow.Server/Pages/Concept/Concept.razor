@using Microsoft.FSharp.Core
@using CardOverflow.Pure
@using System.Linq
@using CardOverflow.Entity
@using CardOverflow.Legacy
@using CardOverflow.Debug
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject TimeProvider TimeProvider
@inject UserProvider UserProvider
@inject KeyValueStore KeyValueStore

@if (_concept == null) {
  <p><em>@_loadingMessage</em></p>
} else {
  <div class="row">
    <div class="col-4">
      <Concept_Examples Concept=@_concept />
    </div>
    <div class="col">
      <div class="row">
        <div class="col-xl">
          <Concept_IFrameHeader Concept=@_concept /> @*fix*@
          @foreach (var x in _concept.FrontBackFrontSynthBackSynthAll) {
            <div class="row" style="border-width: medium!important;">
              <div class="col">
                <ResizingIframe Srcdoc="@x.Item2" />
              </div>
            </div>
          }
        </div>
      </div>
      <div class="row">
        <div class="col-xl">
          @*<Concept_Tag Concept=@_concept />*@
        </div>
        <div class="col-xl">
          @*<Concept_Comments Concept=@_concept />*@
        </div>
      </div>
    </div>
  </div>
}

@code {
  [Parameter] public Guid ConceptId { get; set; }
  private Guid? _userId;
  private Domain.Projection.Concept _concept;
  private string _loadingMessage = "Loading...";

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _userId = await UserProvider.GetId();
    _concept = await KeyValueStore.GetConcept_(ConceptId).ToTask();
  }

  private void _ShowError(string error) {
    ToastService.ShowError(error);
    _loadingMessage = error;
  }

}
