@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider
@inject UserAppender UserAppender
@inject StackAppender StackAppender

<div>
  <div class="d-flex">
    <strong class="my-2">
      Setting:&nbsp;
    </strong>
    <CardSettingSelector SettingSelected=_SetSetting SelectedId=@Card.CardSettingId />
  </div>
  <div class="d-flex">
    <strong class="my-2">
      Deck:&nbsp;
    </strong>
    @*<DeckSelector DecksSelected=_SetDeck SelectedIds=@Card.DeckIds.ToList() />*@ @*medTODO move to stack*@
  </div>
  <div class="d-flex justify-content-between">
    <div>
      <strong>
        Due:
      </strong>
      <span title=@(Card.Due + "UTC")>
        <Due DueDate=@Card.Due />
      </span>
    </div>
    @if (!_showAdvanced) {
      <button class="btn my-0 py-0" @onclick=@(() => _showAdvanced = true)>
        <i class="fas fa-ellipsis-h"></i>
      </button>
    }
  </div>
  @if (_showAdvanced) {
    <div>
      <strong>
        State:
      </strong>
      @Card.State
    </div>
    <div>
      <strong>
        Is Lapsed:
      </strong>
      @Card.IsLapsed
    </div>
    <div>
      <strong>
        Ease Factor:
      </strong>
      @(Card.EaseFactor * 100)%
    </div>
    <div>
      @if (Card.State.IsSuspended) {
        <button class="btn btn-primary" @onclick=@(() => _editState(CardState.Normal))>
          Unsuspend
        </button>
      } else {
        <button class="btn btn-outline-primary" @onclick=@(() => _editState(CardState.Suspended))>
          Suspend
        </button>
      }
    </div>
  }
</div>

@code {
  [Parameter] public Domain.Summary.Card Card { get; set; }
  [Parameter] public Guid StackId { get; set; }
  [Parameter] public EventCallback<(Domain.Infrastructure.CardTemplatePointer, CardState)> CardStateUpdated { get; set; }
  private bool _showAdvanced;

  private async Task _SetSetting(Guid newId) {
    if (await StackAppender.ChangeCardSetting(newId, Card.Pointer, StackId)) {
      ToastService.ShowInfo("Card setting saved!");
    }
  }

  private async Task _SetDeck(List<Guid> newDeckIds) {
    if (await StackAppender.ChangeDecks(newDeckIds, Card.Pointer, StackId)) {
      ToastService.ShowInfo("Saved!");
    }
  }

  private async Task _editState(CardState state) {
    if (await StackAppender.ChangeCardState(state, Card.Pointer, StackId)) {
      await CardStateUpdated.InvokeAsync((Card.Pointer, state));
    }
  }

}
