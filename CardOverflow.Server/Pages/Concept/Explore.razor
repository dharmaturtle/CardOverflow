@page "/concept"
@page "/concept/{ConceptId:guid}"

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@inject DbExecutor DbExecutor
@inject Api.Elsea.IClient Elsea

<div class="d-flex justify-content-between align-items-center">
  <SearchBar SearchClicked="@SearchClicked" BackLink="/concept/" CreateLink=@(x => $"/concept/{x}") Ids=@_concepts?.Select(x => x.Id.ToString())?.ToList() SelectedId=@ConceptId.ToString() />
</div>
@if (ConceptId == default) {
  @if (_concepts == null) {
    <p><em>Loading...</em></p>
  } else {
    <table class="table">
      <tr>
        <th></th>
        <th>Users</th>
        <th>Name</th>
      </tr>
      @foreach (var concept in _concepts) {
        <tr>
          <td>
            <HoverPreview> @*highTODO fix! It needs the attribute: `IsCollected=@concept.IsCollected`*@
              <ResizingIframeExample ExampleRevisionId=@concept.CurrentId Front /> @*could pass in the srcdoc if it was a param...*@
            </HoverPreview>
          </td>
          <td>
            @concept.Collectors
          </td>
          <td>
            <a href="/concept/@concept.Id">
              @concept.FirstFrontStripped
            </a>
          </td>
        </tr>
      }
    </table>
  }
  <Pager Details=@_details PageChanged=@PageChanged />
} else {
  <Concept ConceptId=@ConceptId.Value />
}

@code {
  [Parameter] public Guid? ConceptId { get; set; }
  private IList<Domain.Projection.ExampleSearch> _concepts;
  private PagedListDetails _details;
  private SearchCommand _search = new SearchCommand { Query = "" };

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (ConceptId == default && _concepts == default) {
      await PageChanged(1);
    }
    StateHasChanged();
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await Elsea.SearchExample(_search.Query, pageNumber).ToTask();
    _details = pagedList.Details;
    _concepts = pagedList.Results.ToList();
  }

  Task SearchClicked(SearchCommand newSearch) {
    ConceptId = null;
    _search = newSearch;
    return PageChanged(1);
  }

}
