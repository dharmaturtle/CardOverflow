@page "/stack"
@page "/stack/{StackId:guid}"
@attribute [Authorize]

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject IToastService ToastService
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject UserProvider UserProvider
@inject Dexie Dexie

<div class="d-flex justify-content-between align-items-center">
  <SearchBar SearchClicked="@SearchClicked" BackLink="/my/concept" CreateLink=@(x => $"/my/concept?revision={x}") Ids=@_cards?.Select(x => x.StackId.ToString())?.Distinct()?.ToList() SelectedId=@StackId.ToString() Query=@search.Query />
</div>
@if (StackId == null) {
  <div>
    @if (_cards == null) {
      <p><em>Loading...</em></p>
    } else {
      <table class="table">
        <tr>
          <th>Preview</th>
          <th>Name</th>
          <th style="min-width: 4rem;">Due</th>
          <th>Tags</th>
        </tr>
        @foreach (var card in _cards) {
          <tr>
            <td>
              <HoverPreview IsCollected=@true>
                <ResizingIframeExample ExampleRevisionId=@card.ExampleInstance.Id Front />
              </HoverPreview>
            </td>
            <td>
              <a href="/stack/@card.StackId">
                @MappingTools.stripHtmlTagsForDisplay(card.ExampleInstance.FrontBackFrontSynthBackSynth(card.Pointer).Item1)
              </a>
            </td>
            <td>
              <Due DueDate=@card.Due />
            </td>
            <td>
              @(string.Join(", ", card.Tags))
            </td>
          </tr>
        }
      </table>
    }
  </div>
} else {
  <Stack_Detail StackId=@StackId.Value />
}

@code {
  private Guid? _userId;
  [Parameter] public Guid? StackId { get; set; }
  private SearchCommand search = new SearchCommand("", SearchOrder.Popularity);
  private List<Domain.Projection.Dexie.CardInstance> _cards;
  private PagedListDetails details;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (StackId == null && _cards == null) {
      await PageChanged(1);
    }
  }

  async Task PageChanged(int pageNumber) {
    _cards = await Dexie.GetCards(); // highTODO pass in `search`
  }

  Task SearchClicked(SearchCommand newSearch) {
    StackId = null;
    search = newSearch;
    return PageChanged(1);
  }

}
