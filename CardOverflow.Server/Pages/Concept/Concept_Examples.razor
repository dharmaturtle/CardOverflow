@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<table style="width:100%">
  <thead>
    <tr>
      @if (IsExplore) {
        <th scope="col" style="text-align:center;">
          <CollectToggles IsConcept=true
                          CollectedIds=@CollectedIds
                          Ids=@(new ConceptRevisionIds(Concept.Id, Concept.Default.Id, Concept.Default.Revision.Id))
                          CardCount=@Concept.Default.Revision.Indexes.Count()
                          ExampleUsers=@Concept.Users
                          UpdateCollectedIds=@UpdateCollectedIds />
        </th>
      }
      <th scope="col" style="width:100%; text-align:center;">
        @if (CollectedIds == default) {
          <h4>Examples</h4>
        } else {
          <div class="btn-group" role="group">
            <a class="btn btn-@(IsExplore ? "primary" : "light")" href="concept?revision=@CollectedIds.Value.RevisionId">
              All Examples
            </a>
            <a class="btn btn-@(!IsExplore ? "primary" : "light")" href="my/concept?revision=@CollectedIds.Value.RevisionId">
              My Example
            </a>
          </div>
        }
      </th>
      @if (IsExplore) {
        <th scope="col">
          <a class="btn btn-outline-success" href="concept/copyrevision/@Selected.ConceptId" title="Add an Example">
            <i class="fas fa-plus"></i>
          </a>
        </th>
      }
    </tr>
  </thead>
  @if (IsExplore) {
    <tbody>
      @foreach (var example in Examples) {
        <Concept_Example Example=@example
                         RevisionSelected=@RevisionSelected
                         CollectedIds=@CollectedIds
                         UpdateCollectedIds=@UpdateCollectedIds
                         Selected=@Selected />
      }
    </tbody>
  }
</table>

@code {
  [Parameter] public ExploreConcept Concept { get; set; }
  [Parameter] public List<Example> Examples { get; set; }
  [Parameter] public EventCallback<RevisionMeta> RevisionSelected { get; set; }
  [Parameter] public FSharpOption<UpsertIds> CollectedIds { get; set; }
  [Parameter] public EventCallback<FSharpOption<UpsertIds>> UpdateCollectedIds { get; set; }
  [Parameter] public RevisionMeta Selected { get; set; }
  [Parameter] public bool IsExplore { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    StateHasChanged();
  }

}
