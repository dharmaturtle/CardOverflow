@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@using ThoughtDesign.WebLibrary
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject DbExecutor DbExecutor

<div class="card">
  <div class="card-header pb-1">
    <h5 class="d-flex justify-content-between">
      <span>
        <a type="button" @onclick=@_toggleCollapse>
          @if (isCollapsed) {
            <span class="text-muted oi oi-chevron-right"></span>
          } else {
            <span class="text-muted oi oi-chevron-bottom"></span>
          }
          @if (!isEditing) {
            @CardTemplate.Name
          }
        </a>
        @if (isEditing) {
          <InputText @bind-Value=@CardTemplate.Name />
        }
      </span>
      @if (!IsDisabled) {
        <span>
          <a type="button" @onclick=@(() => isEditing = true)>
            <span class="text-muted oi oi-pencil"></span>
          </a>
          @if (DisplayDelete) {
            <a type="button" @onclick=@(() => Delete.InvokeAsync())>
              <span class="oi oi-trash"></span>
            </a>
          }
        </span>
      }
    </h5>
  </div>
  @if (!isCollapsed) {
    <div class="card-body">
      <h5 class="text-center">Question Template</h5>
      <div class="row">
        <div class="col">
          <InputTextArea @bind-Value=@CardTemplate.Front class="form-control code" rows="25" />
          <ValidationMessage For=@(() => CardTemplate.Front) />
        </div>
        <div class="col">
          <iframe sandbox="allow-scripts" srcdoc=@_front style="height: 30vh; width: 100%; resize: vertical;"></iframe>
        </div>
      </div>
      <h5 class="text-center">Answer Template</h5>
      <div class="row">
        <div class="col">
          <InputTextArea @bind-Value=@CardTemplate.Back class="form-control code" rows="25" />
          <ValidationMessage For=@(() => CardTemplate.Back) />
        </div>
        <div class="col">
          <iframe sandbox="allow-scripts" srcdoc=@_back style="height: 30vh; width: 100%; resize: vertical;"></iframe>
        </div>
      </div>
    </div>
  }
</div>

@code {
  [Parameter] public CardTemplate CardTemplate { get; set; }
  [Parameter] public string Css { get; set; }
  [Parameter] public EventCallback Delete { get; set; }
  [Parameter] public bool DisplayDelete { get; set; }
  [Parameter] public bool IsDisabled { get; set; }
  bool isCollapsed;
  bool isEditing;

  private void _toggleCollapse() => isCollapsed = !isCollapsed;
  private Tuple<string, string, string, string> _x => CardTemplate.FrontBackFrontSynthBackSynth(Css);
  private string _front => _x.Item1;
  private string _back => _x.Item2;

}
