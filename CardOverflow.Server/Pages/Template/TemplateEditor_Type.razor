@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Collections
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@using ThoughtDesign.WebLibrary
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject DbExecutor DbExecutor

<div class="font-weight-bold">Type</div>
<div class="btn-group" role="group">
  <button type="button" class="btn btn-@(_isStandard ? "primary" : "light")" @onclick=@(() => _setType(TemplateType.NewStandard(_originalCardTemplates)))>
    Standard
  </button>
  <button type="button" class="btn btn-@(_isStandard ? "light" : "primary")" @onclick=@(() => _setType(TemplateType.NewCloze(_originalCardTemplates.First())))>
    Cloze
  </button>
</div>

@code {
  private Domain.Summary.TemplateRevision _revision;
  [Parameter] public Domain.Summary.TemplateRevision Revision {
    get => _revision;
    set {
      _revision = value;
      if (_originalCardTemplates == null) {
        _originalCardTemplates = _revision.JustCardTemplates;
      }
    }
  }
  private FSharpList<CardTemplate> _originalCardTemplates;
  [Parameter] public EventCallback<TemplateType> UpdateTemplateType { get; set; }

  private bool _isStandard => Revision.CardTemplates.IsStandard;

  private Task _setType(TemplateType templateType) =>
    UpdateTemplateType.InvokeAsync(templateType);

}
