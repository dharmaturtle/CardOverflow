@page "/concept/editexample/{ExampleId:guid}"
@page "/concept/copyrevision/{ForkExampleId:guid}"
  @* highTODO rename the above to `forkexample` (or similar) and make sure everyone passes an ExampleId - right now we're getting ordinals *@
@attribute [Authorize]
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@using Microsoft.FSharp.Collections
@inject IToastService ToastService
@inject DbExecutor DbExecutor
@inject Dexie Dexie

@if (_command == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <EditConceptDetail EditConcept=@_command />
}

@code {
  [Parameter] public Guid ExampleId { get; set; }
  [Parameter] public Guid ForkExampleId { get; set; }
  string LoadingMessage = "Loading...";
  ViewEditConceptCommand _command;

  private async Task _TrySetCommandAndCard(Task<FSharpResult<ViewEditConceptCommand, string>> result) {
    var x = await result;
    if (x.IsOk) {
      _command = x.ResultValue;
    } else {
      LoadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  private async Task<FSharpResult<ViewEditConceptCommand, string>> _GetCommandAndCard() {
    if (ExampleId != default) {
      var example = await Dexie.GetCurrentExampleInstance(ExampleId);
      var templateInstance = await Dexie.GetTemplateInstance(example.Template.TemplateId, example.Template.Ordinal);
      return FSharpResult<ViewEditConceptCommand, string>.NewOk(ViewEditConceptCommand.edit(templateInstance, example, Guid.Empty)); // highTODO fix
    } else if (ForkExampleId != default) {
      var example = await Dexie.GetCurrentExampleInstance(ForkExampleId);
      var templateInstance = await Dexie.GetTemplateInstance(example.Template.TemplateId, example.Template.Ordinal);
      return FSharpResult<ViewEditConceptCommand, string>.NewOk(ViewEditConceptCommand.fork(templateInstance, example));
    } else {
      return await FSharpResult<ViewEditConceptCommand, string>.NewError("Invalid id provided.").Apply(Task.FromResult);
    }
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    await _GetCommandAndCard().Apply(_TrySetCommandAndCard);
    StateHasChanged();
  }

}
