@page "/concept/create"
@attribute [Authorize]
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor
@inject Dexie Dexie

@if (_command == null || _templates == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <EditConceptDetail EditConcept=@_command Templates=@_templates NewEditConceptOnSave=true />
}

@code {
  [CascadingParameter] Task<Domain.Summary.User> UserTask { get; set; }
  private Domain.Summary.User _user = UserSummary.init;
  string LoadingMessage = "Loading...";
  private ViewEditConceptCommand _command;
  private List<Domain.Summary.Template> _templates;

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    _user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => SanitizeConceptRepository.getUpsert(db, _user.Id, UpsertCardSource.NewVNewOriginal_UserId(_user.Id), UpsertIdsC.Create())); // lowTODO just pass the userId normally, not as part of a DU
    if (x.IsOk) {
      _command = x.ResultValue;
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
    _templates = await _user.CollectedTemplates.Select(x => x.Item1).Pipe(Dexie.GetTemplate);
    StateHasChanged();
  }

}
