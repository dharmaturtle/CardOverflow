@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using Microsoft.FSharp.Collections
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor
@inject Dexie Dexie
@inject MetaFactory MetaFactory
@inject ExampleAppender ExampleAppender
@inject UserProvider UserProvider

@if (Templates == null) {
  <p><em>Loading...</em></p>
} else {
  <EditForm Model=@EditConcept OnValidSubmit=@UpdateCard @onkeydown=@OnKeyDown tabindex="0" style="outline: none;">
    <fieldset disabled=@_isDisabled>
      <div class="form-group">
        <div class="row">
          <div class="col-sm">
            <div class="input-group">
              <label for="exampleTitleInput" class="col-form-label mr-2">
                Title:
              </label>
              <InputText @bind-Value=@EditConcept.Title class="form-control" id="exampleTitleInput" />
            </div>
            @foreach (var field in EditConcept.FieldValues) {
              <EditConceptField Field=@field ValueUpdated=@(x => { field.Value = x; trySetIndexCount(); }) IsDisabled=@_isDisabled />
            }
          </div>
          <div class="col-sm">
            <div class="row">
              <a href="Template/@_selectedTemplateId" class="col-sm-2 mt-2">
                Card Template
              </a>
              <select value=@_selectedTemplateId class="form-control col-sm-10" @onchange=@(x => x.Value.ToString().Apply(Guid.Parse).Do(id => UpdateSelectedTemplate(id)))>
                @foreach (var template in Templates) {
                  <option value=@template.Id>@template.CurrentRevision.Name</option>
                }
              </select>
            </div>
            <div class="row">
              <a href="Template/@_selectedTemplateId?RevisionId=@_selectedTemplateOrdinal" class="col-sm-2 mt-2" tabindex="-1">
                Revision
              </a>
              <select value=@_selectedTemplateOrdinal class="form-control col-sm-10" @onchange=@(x => x.Value.ToString().Apply(Int32.Parse).Do(UpdateSelectedTemplateRevision))>
                @foreach (var revision in _selectedTemplateRevisions) {
                  <option value=@revision.Ordinal>@revision.Created - @revision.EditSummary</option>
                }
              </select>
            </div>
            @if (EditConcept.Backs.IsOk) {
              @foreach (var (back, i) in EditConcept.Backs.ResultValue.Select((x, i) => (x, i))) {
                <iframe sandbox="allow-scripts" srcdoc=@back style="height: @(80/_indexCount)vh; width: 100%; resize: vertical;"></iframe>
                <EditConceptDetail_Card Command=@_ccCommands.ElementAtOrDefault(i) UpdateCommand=@(command => _updateCardCommand(i, command)) />
              }
            } else {
              <span>
                Error: @EditConcept.Backs.ErrorValue
              </span>
            }
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-sm">
          @if (EditConcept.SourceExampleId != null) {
            <span>Parent</span>
            <a href="example/@EditConcept.SourceExampleId.Value">
              Example
            </a>
          }
        </div>
        <div class="col-sm">
          <div class="row mx-1">
            <span class="btn-group w-100">
              <InputText @bind-Value=@EditConcept.EditSummary class="form-control w-100" placeholder="Edit Summary" />
              <button type="button" class="btn btn-primary" @onclick=@UpdateCard>Save</button>
            </span>
          </div>
          <div class="row float-right">
            <DataAnnotationsValidator />
            <ValidationSummary />
          </div>
        </div>
      </div>
    </fieldset>
  </EditForm>
}

@code {
  [Parameter] public ViewEditConceptCommand EditConcept { get; set; }
  [Parameter] public bool NewEditConceptOnSave { get; set; }
  [Parameter] public List<Domain.Summary.Template> Templates { get; set; }
  private List<EditCardCommand> _ccCommands = new List<EditCardCommand>();
  private Domain.Summary.User _user;
  private List<Domain.Summary.TemplateRevision> _selectedTemplateRevisions;
  private Guid _selectedTemplateId;
  private int _selectedTemplateOrdinal;
  private bool _isDisabled;

  private void _updateCardCommand(int i, EditCardCommand command) {
    while (_ccCommands.ElementAtOrDefault(i) == default) {
      _ccCommands.Add(EditCardCommand.init);
    }
    _ccCommands[i] = command;
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserProvider.ForceSummary();
    if (Templates == null) {
      Templates = await _user.CollectedTemplates.Select(x => x.Item1).Append(EditConcept.TemplateInstance.TemplateId).Pipe(Dexie.GetTemplate);
    }
    if (EditConcept == null) {
      EditConcept = ViewEditConceptCommand.create(Domain.Projection.toCurrentTemplateInstance(Templates.First()));
    }
    UpdateSelectedTemplate(EditConcept.TemplateInstance.TemplateId, EditConcept.TemplateInstance.Ordinal);
    StateHasChanged();
  }

  //private void _SetOption(int newId) {
  //  EditConcept.EditCard.CardSettingId = newId;
  //}

  async Task UpdateCard() {
    if (EditConcept.Backs.IsOk) {
      _isDisabled = true;
      var meta = await MetaFactory.Create();
      var (example, stack) = EditConcept.toEvent(meta, _ccCommands.ToFList(), _user.CardSettings.Single(x => x.IsDefault).NewCardsStartingEaseFactor);
      if (await ExampleAppender.Handle(example, EditConcept.ExampleRevisionId.Item1)) { // highTODO `handle` the `stack` event
        ToastService.ShowInfo("Saved!");
        if (NewEditConceptOnSave) {
          EditConcept = ViewEditConceptCommand.create(EditConcept.TemplateInstance);
          UpdateSelectedTemplate(EditConcept.TemplateInstance.TemplateId, EditConcept.TemplateInstance.Ordinal);
          _isDisabled = false;
        }
      } else {
        _isDisabled = false;
      }
    } else {
      ToastService.ShowError("Card is in an invalid state. Your cloze syntax is probably screwy.");
      _isDisabled = false;
    }
  }

  void UpdateSelectedTemplate(Guid templateId, int? ordinal = null) {
    _selectedTemplateId = templateId;
    _selectedTemplateRevisions = Templates.Single(t => t.Id == templateId).Revisions.ToList();
    UpdateSelectedTemplateRevision(ordinal ?? _selectedTemplateRevisions.First().Ordinal);
  }

  void UpdateSelectedTemplateRevision(int ordinal) {
    _selectedTemplateOrdinal = ordinal;
    EditConcept.TemplateInstance = Domain.Projection.toTemplateInstance(Templates.Single(x => x.Id == _selectedTemplateId), ordinal);
    var valuesByField = EditConcept.FieldValues.ToDictionary(fv => fv.EditField.Name, fv => fv.Value);
    EditConcept.FieldValues = EditConcept.TemplateInstance.Fields
      .Select(field =>
        (valuesByField.ContainsKey(field.Name)
          ? valuesByField[field.Name] ?? ""
          : "")
          .Apply(value =>
            new EditFieldAndValue(
              field,
              value ?? "")
      )).ToList();
  }

  Task OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) =>
    eventArgs.CtrlKey && eventArgs.Key == "Enter"
      ? UpdateCard()
      : Task.CompletedTask;

  private int _indexCount = 1;
  private void trySetIndexCount() {
    var newIndexCount = EditConcept.Backs.ResultValue.Count();
    if (_indexCount != newIndexCount) {
      _indexCount = newIndexCount;
    }
  }

}
